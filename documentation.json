{
    "pipes": [],
    "interfaces": [
        {
            "name": "IDrag",
            "id": "interface-IDrag-18b4b8557ab12a6a8e1b930aefb38a42",
            "file": "projects/ng-draggable-resizable/src/draggable-resizable/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export const events = {\r\n  mouse: {\r\n    start: 'mousedown',\r\n    move: 'mousemove',\r\n    stop: 'mouseup'\r\n  },\r\n  touch: {\r\n    start: 'touchstart',\r\n    move: 'touchmove',\r\n    stop: 'touchend'\r\n  }\r\n}\r\n\r\n/** 禁止用户选取样式 */\r\nexport const userSelectNone = {\r\n  userSelect: 'none',\r\n  MozUserSelect: 'none',\r\n  WebkitUserSelect: 'none',\r\n  MsUserSelect: 'none'\r\n}\r\n\r\n/** 用户选中自动选中样式 */\r\nexport const userSelectAuto = {\r\n  userSelect: 'auto',\r\n  MozUserSelect: 'auto',\r\n  WebkitUserSelect: 'auto',\r\n  MsUserSelect: 'auto'\r\n}\r\n\r\n/** 修改大小 */\r\nexport interface IResize {\r\n  left: number,\r\n  top: number,\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\n/** 拖拽 */\r\nexport interface IDrag {\r\n  left: number,\r\n  top: number,\r\n}\r\n\r\n/** 参考线 */\r\nexport interface IRefLine {\r\n  display: boolean;\r\n  position: number;\r\n  origin: number;\r\n  lineLength: number;\r\n}\r\n\r\n/** 参考线组 */\r\nexport interface IRefLineGroup {\r\n  vLine: IRefLine[];\r\n  hLine: IRefLine[];\r\n}\r\n\r\n/** 鼠标点击位置 */\r\nexport interface IMouseClickPosition {\r\n  mouseX: number;\r\n  mouseY: number;\r\n  x: number;\r\n  y: number;\r\n  w: number;\r\n  h: number;\r\n  top?: number;\r\n  left?: number;\r\n  bottom?: number;\r\n  right?: number;\r\n}\r\n\r\n/** resize handle结构 */\r\nexport interface IHandleInfo {\r\n  size: number;\r\n  offset: -5;\r\n  switch: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "left",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "top",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "description": "<p>拖拽</p>\n",
            "rawdescription": "\n拖拽",
            "methods": []
        },
        {
            "name": "IHandleInfo",
            "id": "interface-IHandleInfo-18b4b8557ab12a6a8e1b930aefb38a42",
            "file": "projects/ng-draggable-resizable/src/draggable-resizable/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export const events = {\r\n  mouse: {\r\n    start: 'mousedown',\r\n    move: 'mousemove',\r\n    stop: 'mouseup'\r\n  },\r\n  touch: {\r\n    start: 'touchstart',\r\n    move: 'touchmove',\r\n    stop: 'touchend'\r\n  }\r\n}\r\n\r\n/** 禁止用户选取样式 */\r\nexport const userSelectNone = {\r\n  userSelect: 'none',\r\n  MozUserSelect: 'none',\r\n  WebkitUserSelect: 'none',\r\n  MsUserSelect: 'none'\r\n}\r\n\r\n/** 用户选中自动选中样式 */\r\nexport const userSelectAuto = {\r\n  userSelect: 'auto',\r\n  MozUserSelect: 'auto',\r\n  WebkitUserSelect: 'auto',\r\n  MsUserSelect: 'auto'\r\n}\r\n\r\n/** 修改大小 */\r\nexport interface IResize {\r\n  left: number,\r\n  top: number,\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\n/** 拖拽 */\r\nexport interface IDrag {\r\n  left: number,\r\n  top: number,\r\n}\r\n\r\n/** 参考线 */\r\nexport interface IRefLine {\r\n  display: boolean;\r\n  position: number;\r\n  origin: number;\r\n  lineLength: number;\r\n}\r\n\r\n/** 参考线组 */\r\nexport interface IRefLineGroup {\r\n  vLine: IRefLine[];\r\n  hLine: IRefLine[];\r\n}\r\n\r\n/** 鼠标点击位置 */\r\nexport interface IMouseClickPosition {\r\n  mouseX: number;\r\n  mouseY: number;\r\n  x: number;\r\n  y: number;\r\n  w: number;\r\n  h: number;\r\n  top?: number;\r\n  left?: number;\r\n  bottom?: number;\r\n  right?: number;\r\n}\r\n\r\n/** resize handle结构 */\r\nexport interface IHandleInfo {\r\n  size: number;\r\n  offset: -5;\r\n  switch: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "offset",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "switch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 77
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "description": "<p>resize handle结构</p>\n",
            "rawdescription": "\nresize handle结构",
            "methods": []
        },
        {
            "name": "IMouseClickPosition",
            "id": "interface-IMouseClickPosition-18b4b8557ab12a6a8e1b930aefb38a42",
            "file": "projects/ng-draggable-resizable/src/draggable-resizable/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export const events = {\r\n  mouse: {\r\n    start: 'mousedown',\r\n    move: 'mousemove',\r\n    stop: 'mouseup'\r\n  },\r\n  touch: {\r\n    start: 'touchstart',\r\n    move: 'touchmove',\r\n    stop: 'touchend'\r\n  }\r\n}\r\n\r\n/** 禁止用户选取样式 */\r\nexport const userSelectNone = {\r\n  userSelect: 'none',\r\n  MozUserSelect: 'none',\r\n  WebkitUserSelect: 'none',\r\n  MsUserSelect: 'none'\r\n}\r\n\r\n/** 用户选中自动选中样式 */\r\nexport const userSelectAuto = {\r\n  userSelect: 'auto',\r\n  MozUserSelect: 'auto',\r\n  WebkitUserSelect: 'auto',\r\n  MsUserSelect: 'auto'\r\n}\r\n\r\n/** 修改大小 */\r\nexport interface IResize {\r\n  left: number,\r\n  top: number,\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\n/** 拖拽 */\r\nexport interface IDrag {\r\n  left: number,\r\n  top: number,\r\n}\r\n\r\n/** 参考线 */\r\nexport interface IRefLine {\r\n  display: boolean;\r\n  position: number;\r\n  origin: number;\r\n  lineLength: number;\r\n}\r\n\r\n/** 参考线组 */\r\nexport interface IRefLineGroup {\r\n  vLine: IRefLine[];\r\n  hLine: IRefLine[];\r\n}\r\n\r\n/** 鼠标点击位置 */\r\nexport interface IMouseClickPosition {\r\n  mouseX: number;\r\n  mouseY: number;\r\n  x: number;\r\n  y: number;\r\n  w: number;\r\n  h: number;\r\n  top?: number;\r\n  left?: number;\r\n  bottom?: number;\r\n  right?: number;\r\n}\r\n\r\n/** resize handle结构 */\r\nexport interface IHandleInfo {\r\n  size: number;\r\n  offset: -5;\r\n  switch: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "bottom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "h",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "left",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "mouseX",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "mouseY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "right",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "top",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "w",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "x",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "y",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "description": "<p>鼠标点击位置</p>\n",
            "rawdescription": "\n鼠标点击位置",
            "methods": []
        },
        {
            "name": "IRefLine",
            "id": "interface-IRefLine-18b4b8557ab12a6a8e1b930aefb38a42",
            "file": "projects/ng-draggable-resizable/src/draggable-resizable/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export const events = {\r\n  mouse: {\r\n    start: 'mousedown',\r\n    move: 'mousemove',\r\n    stop: 'mouseup'\r\n  },\r\n  touch: {\r\n    start: 'touchstart',\r\n    move: 'touchmove',\r\n    stop: 'touchend'\r\n  }\r\n}\r\n\r\n/** 禁止用户选取样式 */\r\nexport const userSelectNone = {\r\n  userSelect: 'none',\r\n  MozUserSelect: 'none',\r\n  WebkitUserSelect: 'none',\r\n  MsUserSelect: 'none'\r\n}\r\n\r\n/** 用户选中自动选中样式 */\r\nexport const userSelectAuto = {\r\n  userSelect: 'auto',\r\n  MozUserSelect: 'auto',\r\n  WebkitUserSelect: 'auto',\r\n  MsUserSelect: 'auto'\r\n}\r\n\r\n/** 修改大小 */\r\nexport interface IResize {\r\n  left: number,\r\n  top: number,\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\n/** 拖拽 */\r\nexport interface IDrag {\r\n  left: number,\r\n  top: number,\r\n}\r\n\r\n/** 参考线 */\r\nexport interface IRefLine {\r\n  display: boolean;\r\n  position: number;\r\n  origin: number;\r\n  lineLength: number;\r\n}\r\n\r\n/** 参考线组 */\r\nexport interface IRefLineGroup {\r\n  vLine: IRefLine[];\r\n  hLine: IRefLine[];\r\n}\r\n\r\n/** 鼠标点击位置 */\r\nexport interface IMouseClickPosition {\r\n  mouseX: number;\r\n  mouseY: number;\r\n  x: number;\r\n  y: number;\r\n  w: number;\r\n  h: number;\r\n  top?: number;\r\n  left?: number;\r\n  bottom?: number;\r\n  right?: number;\r\n}\r\n\r\n/** resize handle结构 */\r\nexport interface IHandleInfo {\r\n  size: number;\r\n  offset: -5;\r\n  switch: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "display",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "lineLength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "origin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "position",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 48
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "description": "<p>参考线</p>\n",
            "rawdescription": "\n参考线",
            "methods": []
        },
        {
            "name": "IRefLineGroup",
            "id": "interface-IRefLineGroup-18b4b8557ab12a6a8e1b930aefb38a42",
            "file": "projects/ng-draggable-resizable/src/draggable-resizable/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export const events = {\r\n  mouse: {\r\n    start: 'mousedown',\r\n    move: 'mousemove',\r\n    stop: 'mouseup'\r\n  },\r\n  touch: {\r\n    start: 'touchstart',\r\n    move: 'touchmove',\r\n    stop: 'touchend'\r\n  }\r\n}\r\n\r\n/** 禁止用户选取样式 */\r\nexport const userSelectNone = {\r\n  userSelect: 'none',\r\n  MozUserSelect: 'none',\r\n  WebkitUserSelect: 'none',\r\n  MsUserSelect: 'none'\r\n}\r\n\r\n/** 用户选中自动选中样式 */\r\nexport const userSelectAuto = {\r\n  userSelect: 'auto',\r\n  MozUserSelect: 'auto',\r\n  WebkitUserSelect: 'auto',\r\n  MsUserSelect: 'auto'\r\n}\r\n\r\n/** 修改大小 */\r\nexport interface IResize {\r\n  left: number,\r\n  top: number,\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\n/** 拖拽 */\r\nexport interface IDrag {\r\n  left: number,\r\n  top: number,\r\n}\r\n\r\n/** 参考线 */\r\nexport interface IRefLine {\r\n  display: boolean;\r\n  position: number;\r\n  origin: number;\r\n  lineLength: number;\r\n}\r\n\r\n/** 参考线组 */\r\nexport interface IRefLineGroup {\r\n  vLine: IRefLine[];\r\n  hLine: IRefLine[];\r\n}\r\n\r\n/** 鼠标点击位置 */\r\nexport interface IMouseClickPosition {\r\n  mouseX: number;\r\n  mouseY: number;\r\n  x: number;\r\n  y: number;\r\n  w: number;\r\n  h: number;\r\n  top?: number;\r\n  left?: number;\r\n  bottom?: number;\r\n  right?: number;\r\n}\r\n\r\n/** resize handle结构 */\r\nexport interface IHandleInfo {\r\n  size: number;\r\n  offset: -5;\r\n  switch: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "hLine",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRefLine[]",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "vLine",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRefLine[]",
                    "optional": false,
                    "description": "",
                    "line": 55
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "description": "<p>参考线组</p>\n",
            "rawdescription": "\n参考线组",
            "methods": []
        },
        {
            "name": "IResize",
            "id": "interface-IResize-18b4b8557ab12a6a8e1b930aefb38a42",
            "file": "projects/ng-draggable-resizable/src/draggable-resizable/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export const events = {\r\n  mouse: {\r\n    start: 'mousedown',\r\n    move: 'mousemove',\r\n    stop: 'mouseup'\r\n  },\r\n  touch: {\r\n    start: 'touchstart',\r\n    move: 'touchmove',\r\n    stop: 'touchend'\r\n  }\r\n}\r\n\r\n/** 禁止用户选取样式 */\r\nexport const userSelectNone = {\r\n  userSelect: 'none',\r\n  MozUserSelect: 'none',\r\n  WebkitUserSelect: 'none',\r\n  MsUserSelect: 'none'\r\n}\r\n\r\n/** 用户选中自动选中样式 */\r\nexport const userSelectAuto = {\r\n  userSelect: 'auto',\r\n  MozUserSelect: 'auto',\r\n  WebkitUserSelect: 'auto',\r\n  MsUserSelect: 'auto'\r\n}\r\n\r\n/** 修改大小 */\r\nexport interface IResize {\r\n  left: number,\r\n  top: number,\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\n/** 拖拽 */\r\nexport interface IDrag {\r\n  left: number,\r\n  top: number,\r\n}\r\n\r\n/** 参考线 */\r\nexport interface IRefLine {\r\n  display: boolean;\r\n  position: number;\r\n  origin: number;\r\n  lineLength: number;\r\n}\r\n\r\n/** 参考线组 */\r\nexport interface IRefLineGroup {\r\n  vLine: IRefLine[];\r\n  hLine: IRefLine[];\r\n}\r\n\r\n/** 鼠标点击位置 */\r\nexport interface IMouseClickPosition {\r\n  mouseX: number;\r\n  mouseY: number;\r\n  x: number;\r\n  y: number;\r\n  w: number;\r\n  h: number;\r\n  top?: number;\r\n  left?: number;\r\n  bottom?: number;\r\n  right?: number;\r\n}\r\n\r\n/** resize handle结构 */\r\nexport interface IHandleInfo {\r\n  size: number;\r\n  offset: -5;\r\n  switch: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "left",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "top",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "description": "<p>修改大小</p>\n",
            "rawdescription": "\n修改大小",
            "methods": []
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-59605758d68ac8e7517d248c1b9d43b3",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.less"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "refLineDef",
                    "defaultValue": "{ vLine: [], hLine: [] }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRefLineGroup",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "title",
                    "defaultValue": "'app-ng-draggable-resizable'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "zone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgZone",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "refLineChange",
                    "args": [
                        {
                            "name": "e",
                            "type": "IRefLineGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "IRefLineGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, NgZone } from '@angular/core';\nimport { IRefLineGroup } from '@rivenfx/ng-draggable-resizable';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.less']\n})\nexport class AppComponent {\n  title = 'app-ng-draggable-resizable';\n\n  refLineDef: IRefLineGroup = { vLine: [], hLine: [] };\n\n\n  constructor(public zone: NgZone) {\n  }\n\n  ngOnInit(): void {\n  }\n\n  refLineChange(e: IRefLineGroup) {\n    this.zone.run(() => {\n      this.refLineDef = e;\n    });\n  };\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".test1 {\r\n  background-color: rgb(239, 154, 154);\r\n}\r\n.test2{\r\n  background-color: rgb(129, 212, 250);\r\n}\r\n.test3{\r\n  background-color: rgb(174, 213, 129);\r\n}\r\n\r\n\r\n",
                    "styleUrl": "./app.component.less"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "zone",
                        "type": "NgZone",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div style=\"height: 800px; width: 1200px; border: 1px solid red; position: relative;margin: 0 auto\">\n\n  <div ngDraggableResizable\n    [w]=\"200\"\n    [h]=\"200\"\n    [parent]=\"true\"\n    [minWidth]=\"200\"\n    [minHeight]=\"200\"\n    [snap]=\"true\"\n    [snapTolerance]=\"10\"\n    class=\"test1\"\n    [disableUserSelect]=\"true\"\n    (refLineChange)=\"refLineChange($event)\">\n    1\n  </div>\n\n  <div ngDraggableResizable\n    [w]=\"200\"\n    [h]=\"200\"\n    [parent]=\"true\"\n    [minWidth]=\"200\"\n    [minHeight]=\"200\"\n    [x]=\"210\"\n    [snap]=\"true\"\n    [snapTolerance]=\"10\"\n    class=\"test2\"\n    [disableUserSelect]=\"true\"\n    (refLineChange)=\"refLineChange($event)\">\n    2\n  </div>\n\n  <div ngDraggableResizable\n    [w]=\"200\"\n    [h]=\"200\"\n    [parent]=\"true\"\n    [minWidth]=\"200\"\n    [minHeight]=\"200\"\n    [x]=\"420\"\n    [snap]=\"true\"\n    [snapTolerance]=\"10\"\n    class=\"test3\"\n    [disableUserSelect]=\"true\"\n    (refLineChange)=\"refLineChange($event)\">\n    3\n  </div>\n\n\n  <!-- 参考线 -->\n  <span class=\"ref-line v-line\"\n    *ngFor=\"let item of refLineDef.vLine\"\n    [ngStyle]=\"{ left: item.position+'px', top: item.origin+'px', height: item.lineLength+'px'}\"></span>\n\n  <span class=\"ref-line h-line\"\n    *ngFor=\"let item of refLineDef.hLine\"\n    [ngStyle]=\"{ top: item.position+'px', left: item.origin+'px', width: item.lineLength+'px'}\"></span>\n</div>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "What background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 322,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "Button contents",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string"
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Is this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "How large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "DraggableResizableComponent",
            "id": "component-DraggableResizableComponent-86c8cd498c7c80fa92760a039a9925ea",
            "file": "projects/ng-draggable-resizable/src/draggable-resizable/draggable-resizable.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[ngDraggableResizable],[ng-draggable-resizable]",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./draggable-resizable.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "active",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "确定组件是否应处于活动状态。 道具对变化作出反应，也可以与sync modifier一起使用，以保持状态与父级同步。 您可以与preventDeactivation prop一起使用，以便完全控制组件外部的活动行为",
                    "description": "<p>确定组件是否应处于活动状态。 道具对变化作出反应，也可以与sync modifier一起使用，以保持状态与父级同步。 您可以与preventDeactivation prop一起使用，以便完全控制组件外部的活动行为</p>\n",
                    "line": 60,
                    "type": "boolean"
                },
                {
                    "name": "axis",
                    "defaultValue": "'both'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "定义元素可拖动的轴。 可用值为x，y或both",
                    "description": "<p>定义元素可拖动的轴。 可用值为x，y或both</p>\n",
                    "line": 97,
                    "type": "\"x\" | \"y\" | \"both\""
                },
                {
                    "name": "className",
                    "defaultValue": "'vdr'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "用于设置可拖动可调整大小的组件的自定义class",
                    "description": "<p>用于设置可拖动可调整大小的组件的自定义class</p>\n",
                    "line": 40,
                    "type": "string"
                },
                {
                    "name": "classNameActive",
                    "defaultValue": "'active'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "用于在活动时设置可拖动可调整大小的组件的自定义class",
                    "description": "<p>用于在活动时设置可拖动可调整大小的组件的自定义class</p>\n",
                    "line": 50,
                    "type": "string"
                },
                {
                    "name": "classNameDraggable",
                    "defaultValue": "'draggable'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "用于在启用draggable时设置可拖动可调整大小的组件的自定义class",
                    "description": "<p>用于在启用draggable时设置可拖动可调整大小的组件的自定义class</p>\n",
                    "line": 42,
                    "type": "string"
                },
                {
                    "name": "classNameDragging",
                    "defaultValue": "'dragging'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "用于在拖动时设置可拖动可调整大小的组件的自定义class",
                    "description": "<p>用于在拖动时设置可拖动可调整大小的组件的自定义class</p>\n",
                    "line": 46,
                    "type": "string"
                },
                {
                    "name": "classNameHandle",
                    "defaultValue": "'handle'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "用于设置每个句柄元素的自定义公共class。 这样你就可以使用选择器<your class> - <handle code>来单独设置每个句柄的样式，其中handle code标识handle prop提供的句柄之一",
                    "description": "<p>用于设置每个句柄元素的自定义公共class。 这样你就可以使用选择器<your class> - <handle code>来单独设置每个句柄的样式，其中handle code标识handle prop提供的句柄之一</p>\n",
                    "line": 52,
                    "type": "string"
                },
                {
                    "name": "classNameResizable",
                    "defaultValue": "'resizable'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "当启用resizable时，用于设置可拖动可调整大小的组件的自定义class",
                    "description": "<p>当启用resizable时，用于设置可拖动可调整大小的组件的自定义class</p>\n",
                    "line": 44,
                    "type": "string"
                },
                {
                    "name": "classNameResizing",
                    "defaultValue": "'resizing'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "用于在调整大小时设置可拖动可调整大小的组件的自定义class",
                    "description": "<p>用于在调整大小时设置可拖动可调整大小的组件的自定义class</p>\n",
                    "line": 48,
                    "type": "string"
                },
                {
                    "name": "disableUserSelect",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "默认情况下，组件将样式声明user-select：none添加到自身以防止在拖动期间选择文本。 您可以通过将此prop设置为false来禁用此行为",
                    "description": "<p>默认情况下，组件将样式声明user-select：none添加到自身以防止在拖动期间选择文本。 您可以通过将此prop设置为false来禁用此行为</p>\n",
                    "line": 56,
                    "type": "boolean"
                },
                {
                    "name": "dragCancel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "定义应该用于防止拖动初始化的选择器",
                    "description": "<p>定义应该用于防止拖动初始化的选择器</p>\n",
                    "line": 105,
                    "type": "string"
                },
                {
                    "name": "draggable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "定义组件应该是否可拖动",
                    "description": "<p>定义组件应该是否可拖动</p>\n",
                    "line": 64,
                    "type": "boolean"
                },
                {
                    "name": "dragHandle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "定义应该用于拖动组件的选择器",
                    "description": "<p>定义应该用于拖动组件的选择器</p>\n",
                    "line": 103,
                    "type": "string"
                },
                {
                    "name": "enableNativeDrag",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "默认情况下，浏览器的本机拖放功能（通常用于图像和其他一些元素）被禁用，因为它可能与组件提供的功能冲突。 如果您因任何原因需要恢复此功能，则可以将此道具设置为true",
                    "description": "<p>默认情况下，浏览器的本机拖放功能（通常用于图像和其他一些元素）被禁用，因为它可能与组件提供的功能冲突。 如果您因任何原因需要恢复此功能，则可以将此道具设置为true</p>\n",
                    "line": 58,
                    "type": "boolean"
                },
                {
                    "name": "grid",
                    "defaultValue": "[1, 1]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "定义捕捉元素的网格",
                    "description": "<p>定义捕捉元素的网格</p>\n",
                    "line": 99,
                    "type": "number[]"
                },
                {
                    "name": "h",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "定义元素的初始高度。它还支持auto，但是当您开始调整大小时，该值将退回到一个数字",
                    "description": "<p>定义元素的初始高度。它还支持auto，但是当您开始调整大小时，该值将退回到一个数字</p>\n",
                    "line": 70,
                    "type": "number | \"auto\""
                },
                {
                    "name": "handleInfo",
                    "defaultValue": "{ size: 8, offset: -5, switch: true }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "当使用transform:scale()进行缩放操作时，其中switch为是否让handle始终保持视觉效果不变,size为handle的大小(宽高相同), offset为handle的位置偏移，通常在自定义handle样式时需要设置",
                    "description": "<p>当使用transform:scale()进行缩放操作时，其中switch为是否让handle始终保持视觉效果不变,size为handle的大小(宽高相同), offset为handle的位置偏移，通常在自定义handle样式时需要设置</p>\n",
                    "line": 118,
                    "type": "IHandleInfo"
                },
                {
                    "name": "handles",
                    "defaultValue": "['tl', 'tm', 'tr', 'mr', 'br', 'bm', 'bl', 'ml']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "定义句柄数组以限制元素大小调整：\r\ntl - 左上角\r\ntm - 上方中间\r\ntr - 右上角\r\nmr - 右中角\r\nbr - 右下角\r\nbm - 底部中间\r\nbl - 左下角\r\nml - 左中角",
                    "description": "<p>定义句柄数组以限制元素大小调整：\ntl - 左上角\ntm - 上方中间\ntr - 右上角\nmr - 右中角\nbr - 右下角\nbm - 底部中间\nbl - 左下角\nml - 左中角</p>\n",
                    "line": 95,
                    "type": "string[]"
                },
                {
                    "name": "isConflictCheck",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "定义组件是否开启冲突检测",
                    "description": "<p>定义组件是否开启冲突检测</p>\n",
                    "line": 122,
                    "type": "boolean"
                },
                {
                    "name": "lockAspectRatio",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "lockAspectRatio属性用于锁定宽高比。 此属性与grid不兼容，因此请确保一次只使用一个",
                    "description": "<p>lockAspectRatio属性用于锁定宽高比。 此属性与grid不兼容，因此请确保一次只使用一个</p>\n",
                    "line": 107,
                    "type": "boolean"
                },
                {
                    "name": "maxHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "定义元素的最大高度",
                    "description": "<p>定义元素的最大高度</p>\n",
                    "line": 78,
                    "type": "number"
                },
                {
                    "name": "maxWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "定义元素的最大宽度",
                    "description": "<p>定义元素的最大宽度</p>\n",
                    "line": 76,
                    "type": "number"
                },
                {
                    "name": "minHeight",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "定义元素的最小高度",
                    "description": "<p>定义元素的最小高度</p>\n",
                    "line": 74,
                    "type": "number"
                },
                {
                    "name": "minWidth",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "定义元素的最小宽度",
                    "description": "<p>定义元素的最小宽度</p>\n",
                    "line": 72,
                    "type": "number"
                },
                {
                    "name": "onDrag",
                    "defaultValue": "() => true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "在调整元素大小之前调用。该函数接收句柄和下一个值“ x”，“ y”，“ width”和“ height”。如果任何处理程序返回了“ false”，则该操作将取消",
                    "description": "<p>在调整元素大小之前调用。该函数接收句柄和下一个值“ x”，“ y”，“ width”和“ height”。如果任何处理程序返回了“ false”，则该操作将取消</p>\n",
                    "line": 111,
                    "type": "function"
                },
                {
                    "name": "onDragStart",
                    "defaultValue": "() => true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "调整大小时启动（单击或触摸手柄）。 如果任何处理程序返回false，则操作将取消",
                    "description": "<p>调整大小时启动（单击或触摸手柄）。 如果任何处理程序返回false，则操作将取消</p>\n",
                    "line": 109,
                    "type": "function"
                },
                {
                    "name": "onResize",
                    "defaultValue": "() => true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "在调整元素大小之前调用。该函数接收句柄和下一个值“ x”，“ y”，“ width”和“ height”。如果任何处理程序返回了“ false”，则该操作将取消",
                    "description": "<p>在调整元素大小之前调用。该函数接收句柄和下一个值“ x”，“ y”，“ width”和“ height”。如果任何处理程序返回了“ false”，则该操作将取消</p>\n",
                    "line": 115,
                    "type": "function"
                },
                {
                    "name": "onResizeStart",
                    "defaultValue": "() => true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "调整大小时启动（单击或触摸手柄）。 如果任何处理程序返回false，则操作将取消",
                    "description": "<p>调整大小时启动（单击或触摸手柄）。 如果任何处理程序返回false，则操作将取消</p>\n",
                    "line": 113,
                    "type": "function"
                },
                {
                    "name": "parent",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "将组件的移动和尺寸限制为父组件（如果提供了就设置true），或者限制为由有效CSS选择器标识的元素",
                    "description": "<p>将组件的移动和尺寸限制为父组件（如果提供了就设置true），或者限制为由有效CSS选择器标识的元素</p>\n",
                    "line": 101,
                    "type": "boolean | string"
                },
                {
                    "name": "preventDeactivation",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "* 确定当用户在其外部单击/点击时是否应停用该组件",
                    "description": "<ul>\n<li>确定当用户在其外部单击/点击时是否应停用该组件</li>\n</ul>\n",
                    "line": 62,
                    "type": "boolean"
                },
                {
                    "name": "resizable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "定义组件应该可以调整大小",
                    "description": "<p>定义组件应该可以调整大小</p>\n",
                    "line": 66,
                    "type": "boolean"
                },
                {
                    "name": "scale",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "当CSS 3 (scale transformation) 应用于父元素之一时，缩放道具控制缩放属性。如果没有提供，默认值是1",
                    "description": "<p>当CSS 3 (scale transformation) 应用于父元素之一时，缩放道具控制缩放属性。如果没有提供，默认值是1</p>\n",
                    "line": 54,
                    "type": "number"
                },
                {
                    "name": "scaleRatio",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "当使用transform:scale()进行缩放操作时，用来修复操作组件时鼠标指针与移动缩放位置有所偏移的情况",
                    "description": "<p>当使用transform:scale()进行缩放操作时，用来修复操作组件时鼠标指针与移动缩放位置有所偏移的情况</p>\n",
                    "line": 120,
                    "type": "number"
                },
                {
                    "name": "snap",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "定义组件是否开启元素对齐",
                    "description": "<p>定义组件是否开启元素对齐</p>\n",
                    "line": 124,
                    "type": "boolean"
                },
                {
                    "name": "snapTolerance",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "当调用snap时，定义组件与元素之间的对齐距离，以像素(px)为单位",
                    "description": "<p>当调用snap时，定义组件与元素之间的对齐距离，以像素(px)为单位</p>\n",
                    "line": 126,
                    "type": "number"
                },
                {
                    "name": "w",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "定义元素的初始宽度。它还支持auto，但是当您开始调整大小时，该值将退回到一个数字",
                    "description": "<p>定义元素的初始宽度。它还支持auto，但是当您开始调整大小时，该值将退回到一个数字</p>\n",
                    "line": 68,
                    "type": "number | \"auto\""
                },
                {
                    "name": "x",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "定义元素的初始x位置",
                    "description": "<p>定义元素的初始x位置</p>\n",
                    "line": 80,
                    "type": "number"
                },
                {
                    "name": "y",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "定义元素的初始y位置",
                    "description": "<p>定义元素的初始y位置</p>\n",
                    "line": 82,
                    "type": "number"
                },
                {
                    "name": "z",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "定义元素的zIndex",
                    "description": "<p>定义元素的zIndex</p>\n",
                    "line": 84,
                    "type": "string | number"
                }
            ],
            "outputsClass": [
                {
                    "name": "activated",
                    "defaultValue": "new EventEmitter<true>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n组件被激活",
                    "description": "<p>组件被激活</p>\n",
                    "line": 131,
                    "type": "EventEmitter<>"
                },
                {
                    "name": "activeChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n激活状态发生改变",
                    "description": "<p>激活状态发生改变</p>\n",
                    "line": 137,
                    "type": "EventEmitter<boolean>"
                },
                {
                    "name": "contextmenu",
                    "defaultValue": "new EventEmitter<MouseEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n右键菜单事件",
                    "description": "<p>右键菜单事件</p>\n",
                    "line": 135,
                    "type": "EventEmitter<MouseEvent>"
                },
                {
                    "name": "deactivated",
                    "defaultValue": "new EventEmitter<false>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n组件取消激活",
                    "description": "<p>组件取消激活</p>\n",
                    "line": 133,
                    "type": "EventEmitter<>"
                },
                {
                    "name": "onDragging",
                    "defaultValue": "new EventEmitter<IDrag>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n拖拽",
                    "description": "<p>拖拽</p>\n",
                    "line": 139,
                    "type": "EventEmitter<IDrag>"
                },
                {
                    "name": "onDragStop",
                    "defaultValue": "new EventEmitter<IDrag>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n拖拽结束",
                    "description": "<p>拖拽结束</p>\n",
                    "line": 141,
                    "type": "EventEmitter<IDrag>"
                },
                {
                    "name": "onResizeStop",
                    "defaultValue": "new EventEmitter<IResize>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n改变大小结束",
                    "description": "<p>改变大小结束</p>\n",
                    "line": 145,
                    "type": "EventEmitter<IResize>"
                },
                {
                    "name": "onResizing",
                    "defaultValue": "new EventEmitter<IResize>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n改变大小",
                    "description": "<p>改变大小</p>\n",
                    "line": 143,
                    "type": "EventEmitter<IResize>"
                },
                {
                    "name": "refLineChange",
                    "defaultValue": "new EventEmitter<IRefLineGroup>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n参考线发生改变",
                    "description": "<p>参考线发生改变</p>\n",
                    "line": 147,
                    "type": "EventEmitter<IRefLineGroup>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 166
                },
                {
                    "name": "_width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 156
                },
                {
                    "name": "aspectFactor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 180
                },
                {
                    "name": "bottom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 154
                },
                {
                    "name": "bounds",
                    "defaultValue": "{\r\n    minLeft: null,\r\n    maxLeft: null,\r\n    minRight: null,\r\n    maxRight: null,\r\n    minTop: null,\r\n    maxTop: null,\r\n    minBottom: null,\r\n    maxBottom: null\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "<p>当前dom元素界限</p>\n",
                    "line": 219,
                    "rawdescription": "\n当前dom元素界限"
                },
                {
                    "name": "checkParentSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Function",
                    "optional": false,
                    "description": "",
                    "line": 322,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "deselect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Function",
                    "optional": false,
                    "description": "",
                    "line": 318,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "dragging",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>当前dom元素是否正在拖拽</p>\n",
                    "line": 203,
                    "rawdescription": "\n当前dom元素是否正在拖拽"
                },
                {
                    "name": "elRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLElement>",
                    "optional": false,
                    "description": "",
                    "line": 325,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "handle",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "null",
                    "optional": false,
                    "description": "<p>当前选中的handle</p>\n",
                    "line": 198,
                    "rawdescription": "\n当前选中的handle"
                },
                {
                    "name": "handleResize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Function",
                    "optional": false,
                    "description": "",
                    "line": 321,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "handleUp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Function",
                    "optional": false,
                    "description": "",
                    "line": 319,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "heightTouched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>高度touche</p>\n",
                    "line": 179,
                    "rawdescription": "\n高度touche"
                },
                {
                    "name": "left",
                    "defaultValue": "this.x",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 150
                },
                {
                    "name": "maxH",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>当前dom元素最大高度</p>\n",
                    "line": 195,
                    "rawdescription": "\n当前dom元素最大高度"
                },
                {
                    "name": "maxW",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>当前dom元素最大宽度</p>\n",
                    "line": 193,
                    "rawdescription": "\n当前dom元素最大宽度"
                },
                {
                    "name": "minH",
                    "defaultValue": "this.minHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>当前dom元素最小高度</p>\n",
                    "line": 190,
                    "rawdescription": "\n当前dom元素最小高度"
                },
                {
                    "name": "minW",
                    "defaultValue": "this.minWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>当前dom元素最小宽度</p>\n",
                    "line": 188,
                    "rawdescription": "\n当前dom元素最小宽度"
                },
                {
                    "name": "mouseClickPosition",
                    "defaultValue": "{ mouseX: 0, mouseY: 0, x: 0, y: 0, w: 0, h: 0 }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMouseClickPosition",
                    "optional": false,
                    "description": "<p>鼠标点击位置</p>\n",
                    "line": 216,
                    "rawdescription": "\n鼠标点击位置"
                },
                {
                    "name": "move",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Function",
                    "optional": false,
                    "description": "",
                    "line": 320,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "parentHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>当前dom元素的父级宽度</p>\n",
                    "line": 185,
                    "rawdescription": "\n当前dom元素的父级宽度"
                },
                {
                    "name": "parentWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>当前dom元素的父级宽度</p>\n",
                    "line": 183,
                    "rawdescription": "\n当前dom元素的父级宽度"
                },
                {
                    "name": "resizing",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>当前dom元素是否正在改变大小</p>\n",
                    "line": 209,
                    "rawdescription": "\n当前dom元素是否正在改变大小"
                },
                {
                    "name": "resizingOnX",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>当前dom元素改变大小为x轴</p>\n",
                    "line": 211,
                    "rawdescription": "\n当前dom元素改变大小为x轴"
                },
                {
                    "name": "resizingOnY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>当前dom元素改变大小为y轴</p>\n",
                    "line": 213,
                    "rawdescription": "\n当前dom元素改变大小为y轴"
                },
                {
                    "name": "right",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 153
                },
                {
                    "name": "top",
                    "defaultValue": "this.y",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 151
                },
                {
                    "name": "widthTouched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>宽度touche</p>\n",
                    "line": 177,
                    "rawdescription": "\n宽度touche"
                },
                {
                    "name": "zIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>当前dom元素元素的zIndex</p>\n",
                    "line": 205,
                    "rawdescription": "\n当前dom元素元素的zIndex"
                }
            ],
            "methodsClass": [
                {
                    "name": "calcDragLimits",
                    "args": [],
                    "optional": false,
                    "returnType": "{ minLeft: number; maxLeft: number; minRight: number; maxRight: number; minTop: number; maxTop: number; minBottom: number; maxBottom: number; }",
                    "typeParameters": [],
                    "line": 1071,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "calcLineValues",
                    "args": [
                        {
                            "name": "arr",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 1008,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "arr",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calcResizeLimits",
                    "args": [],
                    "optional": false,
                    "returnType": "{ minLeft: any; maxLeft: any; minTop: any; maxTop: any; minRight: any; maxRight: any; minBottom: any; maxBottom: any; }",
                    "typeParameters": [],
                    "line": 1099,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "changeHeight",
                    "args": [
                        {
                            "name": "val",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1303,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeWidth",
                    "args": [
                        {
                            "name": "val",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1284,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "conflictCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 802,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "elementDown",
                    "args": [
                        {
                            "name": "e",
                            "type": "TouchEvent | MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 661,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "TouchEvent | MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "elementMouseDown",
                    "args": [
                        {
                            "name": "e",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 655,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "elementTouchDown",
                    "args": [
                        {
                            "name": "e",
                            "type": "TouchEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 649,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "TouchEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formatTransformVal",
                    "args": [
                        {
                            "name": "string",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 1064,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "string",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getActiveAll",
                    "args": [
                        {
                            "name": "nodes",
                            "type": "HTMLElement[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 1031,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n获取所有激活的节点",
                    "description": "<p>获取所有激活的节点</p>\n",
                    "modifierKind": [
                        122,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "nodes",
                            "type": "HTMLElement[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getParentSize",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 628,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "handleClass",
                    "args": [
                        {
                            "name": "handle",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 545,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "handle",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleDown",
                    "args": [
                        {
                            "name": "handle",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "e",
                            "type": "MouseEvent | TouchEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 562,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "handle",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "e",
                            "type": "MouseEvent | TouchEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleStyle",
                    "args": [
                        {
                            "name": "handle",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ width: string; height: string; top: any; left: any; right: any; bottom: any; display: string; } | { display: string; }",
                    "typeParameters": [],
                    "line": 487,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "handle",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleTouchDown",
                    "args": [
                        {
                            "name": "handle",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "e",
                            "type": "TouchEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 555,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "handle",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "e",
                            "type": "TouchEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveHorizontally",
                    "args": [
                        {
                            "name": "val",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1084,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveVertically",
                    "args": [
                        {
                            "name": "val",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1091,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 358,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 385,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 476,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 331,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCheckParentSize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 615,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "onContextMenu",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 550,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDeselect",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 1015,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n取消",
                    "description": "<p>取消</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onHandleDrag",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 718,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onHandleResize",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 1204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onHandleUp",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 749,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMove",
                    "args": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 709,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122,
                        130
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetBoundsAndMouseState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 599,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "settingAttribute",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 794,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "snapCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 852,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        130
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  AfterViewInit, ChangeDetectorRef,\r\n  Component,\r\n  ElementRef, EventEmitter,\r\n  Input, NgZone, OnChanges,\r\n  OnDestroy,\r\n  OnInit, Output, Provider,\r\n  SimpleChange,\r\n  SimpleChanges\r\n} from '@angular/core';\r\nimport { matchesSelectorToParentElements, getComputedSize, addEvent, removeEvent } from '../utils';\r\nimport { computeWidth, computeHeight, restrictToBounds, snapToGrid } from '../utils';\r\nimport {\r\n  events,\r\n  IDrag,\r\n  IHandleInfo,\r\n  IMouseClickPosition,\r\n  IRefLineGroup,\r\n  IResize,\r\n  userSelectAuto,\r\n  userSelectNone\r\n} from \"./interfaces\";\r\n\r\nlet eventsFor = events.mouse\r\n\r\n@Component({\r\n  selector: '[ngDraggableResizable],[ng-draggable-resizable]',\r\n  templateUrl: './draggable-resizable.component.html',\r\n  host: {\r\n    '[style]': 'style',\r\n    '[class]': 'selfClass',\r\n    '(mousedown)': 'elementMouseDown($event)',\r\n    '(touchstart)': \"elementTouchDown($event)\",\r\n    '(contextmenu)': 'onContextMenu($event)',\r\n  }\r\n})\r\nexport class DraggableResizableComponent implements OnInit, AfterViewInit, OnChanges, OnDestroy {\r\n\r\n  /** 用于设置可拖动可调整大小的组件的自定义class */\r\n  @Input() className = 'vdr';\r\n  /** 用于在启用draggable时设置可拖动可调整大小的组件的自定义class */\r\n  @Input() classNameDraggable = 'draggable';\r\n  /** 当启用resizable时，用于设置可拖动可调整大小的组件的自定义class */\r\n  @Input() classNameResizable = 'resizable';\r\n  /** 用于在拖动时设置可拖动可调整大小的组件的自定义class */\r\n  @Input() classNameDragging = 'dragging';\r\n  /** 用于在调整大小时设置可拖动可调整大小的组件的自定义class */\r\n  @Input() classNameResizing = 'resizing';\r\n  /** 用于在活动时设置可拖动可调整大小的组件的自定义class */\r\n  @Input() classNameActive = 'active';\r\n  /** 用于设置每个句柄元素的自定义公共class。 这样你就可以使用选择器<your class> - <handle code>来单独设置每个句柄的样式，其中handle code标识handle prop提供的句柄之一 */\r\n  @Input() classNameHandle = 'handle';\r\n  /** 当CSS 3 (scale transformation) 应用于父元素之一时，缩放道具控制缩放属性。如果没有提供，默认值是1 */\r\n  @Input() scale = 1;\r\n  /** 默认情况下，组件将样式声明user-select：none添加到自身以防止在拖动期间选择文本。 您可以通过将此prop设置为false来禁用此行为 */\r\n  @Input() disableUserSelect = true;\r\n  /** 默认情况下，浏览器的本机拖放功能（通常用于图像和其他一些元素）被禁用，因为它可能与组件提供的功能冲突。 如果您因任何原因需要恢复此功能，则可以将此道具设置为true */\r\n  @Input() enableNativeDrag = false;\r\n  /** 确定组件是否应处于活动状态。 道具对变化作出反应，也可以与sync modifier一起使用，以保持状态与父级同步。 您可以与preventDeactivation prop一起使用，以便完全控制组件外部的活动行为 */\r\n  @Input() active = false;\r\n  /*** 确定当用户在其外部单击/点击时是否应停用该组件 */\r\n  @Input() preventDeactivation = false;\r\n  /** 定义组件应该是否可拖动 */\r\n  @Input() draggable = true;\r\n  /** 定义组件应该可以调整大小 */\r\n  @Input() resizable = true;\r\n  /** 定义元素的初始宽度。它还支持auto，但是当您开始调整大小时，该值将退回到一个数字 */\r\n  @Input() w: number | 'auto';\r\n  /** 定义元素的初始高度。它还支持auto，但是当您开始调整大小时，该值将退回到一个数字 */\r\n  @Input() h: number | 'auto';\r\n  /** 定义元素的最小宽度 */\r\n  @Input() minWidth = 0;\r\n  /** 定义元素的最小高度 */\r\n  @Input() minHeight = 0;\r\n  /** 定义元素的最大宽度 */\r\n  @Input() maxWidth: number;\r\n  /** 定义元素的最大高度 */\r\n  @Input() maxHeight: number;\r\n  /** 定义元素的初始x位置 */\r\n  @Input() x = 0;\r\n  /** 定义元素的初始y位置 */\r\n  @Input() y = 0;\r\n  /** 定义元素的zIndex */\r\n  @Input() z: string | number;\r\n  /** 定义句柄数组以限制元素大小调整：\r\n   tl - 左上角\r\n   tm - 上方中间\r\n   tr - 右上角\r\n   mr - 右中角\r\n   br - 右下角\r\n   bm - 底部中间\r\n   bl - 左下角\r\n   ml - 左中角\r\n   */\r\n  @Input() handles: string[] = ['tl', 'tm', 'tr', 'mr', 'br', 'bm', 'bl', 'ml'];\r\n  /** 定义元素可拖动的轴。 可用值为x，y或both */\r\n  @Input() axis: 'x' | 'y' | 'both' = 'both';\r\n  /** 定义捕捉元素的网格 */\r\n  @Input() grid: number[] = [1, 1];\r\n  /** 将组件的移动和尺寸限制为父组件（如果提供了就设置true），或者限制为由有效CSS选择器标识的元素 */\r\n  @Input() parent: boolean | string = false;\r\n  /** 定义应该用于拖动组件的选择器 */\r\n  @Input() dragHandle: string;\r\n  /** 定义应该用于防止拖动初始化的选择器 */\r\n  @Input() dragCancel: string;\r\n  /** lockAspectRatio属性用于锁定宽高比。 此属性与grid不兼容，因此请确保一次只使用一个 */\r\n  @Input() lockAspectRatio = false;\r\n  /** 调整大小时启动（单击或触摸手柄）。 如果任何处理程序返回false，则操作将取消 */\r\n  @Input() onDragStart: (handle?: DraggableResizableComponent, e?: TouchEvent | MouseEvent) => boolean = () => true;\r\n  /** 在调整元素大小之前调用。该函数接收句柄和下一个值“ x”，“ y”，“ width”和“ height”。如果任何处理程序返回了“ false”，则该操作将取消 */\r\n  @Input() onDrag: (handle?: DraggableResizableComponent, left?: number, top?: number, width?: number, height?: number) => boolean = () => true;\r\n  /** 调整大小时启动（单击或触摸手柄）。 如果任何处理程序返回false，则操作将取消 */\r\n  @Input() onResizeStart: (handle?: DraggableResizableComponent, e?: MouseEvent | TouchEvent) => boolean = () => true;\r\n  /** 在调整元素大小之前调用。该函数接收句柄和下一个值“ x”，“ y”，“ width”和“ height”。如果任何处理程序返回了“ false”，则该操作将取消 */\r\n  @Input() onResize: (handle?: DraggableResizableComponent, left?: number, top?: number, width?: number, height?: number) => boolean = () => true;\r\n  // ==================== 新增属性 开始 ====================\r\n  /** 当使用transform:scale()进行缩放操作时，其中switch为是否让handle始终保持视觉效果不变,size为handle的大小(宽高相同), offset为handle的位置偏移，通常在自定义handle样式时需要设置 */\r\n  @Input() handleInfo: IHandleInfo = { size: 8, offset: -5, switch: true };\r\n  /** 当使用transform:scale()进行缩放操作时，用来修复操作组件时鼠标指针与移动缩放位置有所偏移的情况 */\r\n  @Input() scaleRatio = 1;\r\n  /** 定义组件是否开启冲突检测 */\r\n  @Input() isConflictCheck = false;\r\n  /** 定义组件是否开启元素对齐 */\r\n  @Input() snap = false;\r\n  /** 当调用snap时，定义组件与元素之间的对齐距离，以像素(px)为单位 */\r\n  @Input() snapTolerance = 5;\r\n\r\n  // ==================== 新增属性 结束 ====================\r\n\r\n  /** 组件被激活 */\r\n  @Output() activated: EventEmitter<true> = new EventEmitter<true>();\r\n  /** 组件取消激活 */\r\n  @Output() deactivated: EventEmitter<false> = new EventEmitter<false>();\r\n  /** 右键菜单事件 */\r\n  @Output() contextmenu: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\r\n  /** 激活状态发生改变 */\r\n  @Output() activeChange: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n  /** 拖拽 */\r\n  @Output() onDragging: EventEmitter<IDrag> = new EventEmitter<IDrag>();\r\n  /** 拖拽结束 */\r\n  @Output() onDragStop: EventEmitter<IDrag> = new EventEmitter<IDrag>();\r\n  /** 改变大小 */\r\n  @Output() onResizing: EventEmitter<IResize> = new EventEmitter<IResize>();\r\n  /** 改变大小结束 */\r\n  @Output() onResizeStop: EventEmitter<IResize> = new EventEmitter<IResize>();\r\n  /** 参考线发生改变 */\r\n  @Output() refLineChange: EventEmitter<IRefLineGroup> = new EventEmitter<IRefLineGroup>();\r\n\r\n\r\n  left = this.x;\r\n  top = this.y;\r\n\r\n  right: number;\r\n  bottom: number;\r\n\r\n  _width: number;\r\n  get width() {\r\n    return this._width;\r\n  }\r\n\r\n  set width(val: number) {\r\n    this._width = val;\r\n    this.$el.style.width = this.computedWidth;\r\n  }\r\n\r\n  _height: number;\r\n  get height() {\r\n    return this._height;\r\n  }\r\n\r\n  set height(val: number) {\r\n    this._height = val;\r\n    this.$el.style.height = this.computedHeight;\r\n  }\r\n\r\n  /** 宽度touche */\r\n  widthTouched = false;\r\n  /** 高度touche */\r\n  heightTouched = false;\r\n  aspectFactor: number;\r\n\r\n  /** 当前dom元素的父级宽度 */\r\n  parentWidth: number;\r\n  /** 当前dom元素的父级宽度 */\r\n  parentHeight: number;\r\n\r\n  /** 当前dom元素最小宽度 */\r\n  minW = this.minWidth;\r\n  /** 当前dom元素最小高度 */\r\n  minH = this.minHeight;\r\n\r\n  /** 当前dom元素最大宽度 */\r\n  maxW: number;\r\n  /** 当前dom元素最大高度 */\r\n  maxH: number;\r\n\r\n  /** 当前选中的handle */\r\n  handle = null;\r\n\r\n\r\n\r\n  /** 当前dom元素是否正在拖拽 */\r\n  dragging = false;\r\n  /** 当前dom元素元素的zIndex */\r\n  zIndex: number;\r\n\r\n\r\n  /** 当前dom元素是否正在改变大小 */\r\n  resizing = false;\r\n  /** 当前dom元素改变大小为x轴 */\r\n  resizingOnX: boolean;\r\n  /** 当前dom元素改变大小为y轴 */\r\n  resizingOnY: boolean;\r\n\r\n  /** 鼠标点击位置 */\r\n  mouseClickPosition: IMouseClickPosition = { mouseX: 0, mouseY: 0, x: 0, y: 0, w: 0, h: 0 };\r\n\r\n  /** 当前dom元素界限 */\r\n  bounds = {\r\n    minLeft: null,\r\n    maxLeft: null,\r\n    minRight: null,\r\n    maxRight: null,\r\n    minTop: null,\r\n    maxTop: null,\r\n    minBottom: null,\r\n    maxBottom: null\r\n  }\r\n\r\n  /** 当前dom元素是否启用 */\r\n  get enabled() {\r\n    return this.active;\r\n  }\r\n  /** 当前dom元素是否启用 */\r\n  set enabled(val: boolean) {\r\n    this.active = val;\r\n    if (val) {\r\n      this.activated.emit(true);\r\n    } else {\r\n      this.deactivated.emit(false);\r\n    }\r\n    this.activeChange.emit(val);\r\n  }\r\n\r\n  /** 当前dom元素重置大小的handle */\r\n  get actualHandles() {\r\n    if (!this.enabled) {\r\n      return [];\r\n    }\r\n\r\n    return this.handles;\r\n  }\r\n\r\n  /** 当前dom元素使用的类 */\r\n  get selfClass() {\r\n\r\n    let res = this.className + ' ';\r\n    if (this.enabled && this.classNameActive && this.classNameActive !== '') {\r\n      res += this.classNameActive + ' ';\r\n    }\r\n    if (this.dragging && this.classNameDragging && this.classNameDragging !== '') {\r\n      res += this.classNameDragging + ' ';\r\n    }\r\n    if (this.resizing && this.classNameResizing && this.classNameResizing !== '') {\r\n      res += this.classNameResizing + ' ';\r\n    }\r\n    if (this.draggable && this.classNameDraggable && this.classNameDraggable !== '') {\r\n      res += this.classNameDraggable + ' ';\r\n    }\r\n    if (this.resizable && this.classNameResizable && this.classNameResizable !== '') {\r\n      res += this.classNameResizable + ' ';\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  /** 当前dom元素 */\r\n  get $el(): HTMLElement {\r\n    return this.elRef.nativeElement;\r\n  }\r\n\r\n  /** 当前dom元素的parnet */\r\n  get parentElement() {\r\n    return this.$el.parentElement;\r\n  }\r\n\r\n  /** 当前dom元素的样式 */\r\n  get style() {\r\n    return {\r\n      transform: `translate(${this.left}px, ${this.top}px)`,\r\n      zIndex: this.zIndex,\r\n      ...(this.dragging && this.disableUserSelect ? userSelectNone : userSelectAuto)\r\n    }\r\n  }\r\n\r\n  /** 当前dom元素实际宽度 */\r\n  get computedWidth() {\r\n    if (this.w === 'auto') {\r\n      if (!this.widthTouched) {\r\n        return 'auto'\r\n      }\r\n    }\r\n    return this.width + 'px'\r\n  }\r\n\r\n  /** 当前dom元素实际高度 */\r\n  get computedHeight() {\r\n    if (this.h === 'auto') {\r\n      if (!this.heightTouched) {\r\n        return 'auto'\r\n      }\r\n    }\r\n    return this.height + 'px'\r\n  }\r\n\r\n\r\n  // 内部使用的包装方法\r\n  protected deselect: Function;\r\n  protected handleUp: Function;\r\n  protected move: Function;\r\n  protected handleResize: Function;\r\n  protected checkParentSize: Function;\r\n\r\n  constructor(\r\n    public elRef: ElementRef<HTMLElement>\r\n  ) {\r\n\r\n  }\r\n\r\n\r\n  ngOnInit(): void {\r\n    if (this.maxWidth && this.minWidth > this.maxWidth) {\r\n      console.warn('[Vdr warn]: Invalid prop: minWidth cannot be greater than maxWidth')\r\n    }\r\n    if (this.maxWidth && this.minHeight > this.maxHeight) {\r\n      console.warn('[Vdr warn]: Invalid prop: minHeight cannot be greater than maxHeight')\r\n    }\r\n\r\n    const self = this;\r\n    this.deselect = function (e) {\r\n      self.onDeselect(e);\r\n    };\r\n    this.handleUp = function (e) {\r\n      self.onHandleUp(e);\r\n    };\r\n    this.move = function (e) {\r\n      self.onMove(e);\r\n    };\r\n    this.handleResize = function (e) {\r\n      self.onHandleResize(e);\r\n    };\r\n    this.checkParentSize = function (e) {\r\n      self.onCheckParentSize();\r\n    };\r\n\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n\r\n    if (!this.enableNativeDrag) {\r\n      this.$el.ondragstart = () => false;\r\n    }\r\n\r\n    const [parentWidth, parentHeight] = this.getParentSize()\r\n\r\n    this.parentWidth = parentWidth\r\n    this.parentHeight = parentHeight\r\n    const [width, height] = getComputedSize(this.$el)\r\n    this.aspectFactor = (this.w !== 'auto' ? this.w : width) / (this.h !== 'auto' ? this.h : height)\r\n    this.width = this.w !== 'auto' ? this.w : width\r\n    this.height = this.h !== 'auto' ? this.h : height\r\n    this.right = this.parentWidth - this.width - this.left\r\n    this.bottom = this.parentHeight - this.height - this.top\r\n\r\n    this.settingAttribute()\r\n\r\n    // 优化：取消选中的行为优先绑定在父节点上\r\n    const parentElement = this.$el.parentNode;\r\n    addEvent(parentElement || document.documentElement, 'mousedown', this.deselect);\r\n    addEvent(parentElement || document.documentElement, 'touchend touchcancel', this.deselect);\r\n\r\n    addEvent(window, 'resize', this.checkParentSize);\r\n  }\r\n\r\n  ngOnChanges(changes: { [P in keyof this]?: SimpleChange } & SimpleChanges): void {\r\n\r\n    if (changes.w) {\r\n      if (typeof (this.width) !== 'number') {\r\n        this.changeWidth(changes.w.currentValue);\r\n      }\r\n      if (!this.resizing && !this.dragging) {\r\n        if (this.parent) {\r\n          this.bounds = this.calcResizeLimits();\r\n        }\r\n\r\n        this.changeWidth(changes.w.currentValue);\r\n      }\r\n    }\r\n\r\n    if (changes.h) {\r\n      if (typeof (this.height) !== 'number') {\r\n        this.changeHeight(changes.h.currentValue);\r\n      }\r\n      if (!this.resizing && !this.dragging) {\r\n        if (this.parent) {\r\n          this.bounds = this.calcResizeLimits();\r\n        }\r\n\r\n        this.changeHeight(changes.h.currentValue);\r\n      }\r\n    }\r\n\r\n    if (changes.minWidth) {\r\n      if (changes.minWidth.currentValue > 0 && changes.minWidth.currentValue <= this.width) {\r\n        this.minW = changes.minWidth.currentValue;\r\n      }\r\n    }\r\n\r\n    if (changes.minHeight) {\r\n      if (changes.minHeight.currentValue > 0 && changes.minHeight.currentValue <= this.height) {\r\n        this.minH = changes.minHeight.currentValue;\r\n      }\r\n    }\r\n\r\n    if (changes.maxWidth) {\r\n      this.maxW = changes.maxWidth.currentValue;\r\n    }\r\n\r\n    if (changes.maxHeight) {\r\n      this.maxH = changes.maxHeight.currentValue;\r\n    }\r\n\r\n    if (changes.active) {\r\n      if (changes.active.currentValue) {\r\n        this.activated.emit(true);\r\n      } else {\r\n        this.deactivated.emit(false);\r\n      }\r\n    }\r\n\r\n    if (changes.z) {\r\n      if (changes.z.currentValue >= 0 || changes.z.currentValue === 'auto') {\r\n        this.zIndex = changes.z.currentValue\r\n      }\r\n    }\r\n\r\n    if (changes.x) {\r\n      if (!this.resizing && !this.dragging) {\r\n        if (this.parent) {\r\n          this.bounds = this.calcDragLimits();\r\n        }\r\n\r\n        this.moveHorizontally(changes.x.currentValue);\r\n      }\r\n    }\r\n\r\n    if (changes.y) {\r\n      if (!this.resizing && !this.dragging) {\r\n        if (this.parent) {\r\n          this.bounds = this.calcDragLimits();\r\n        }\r\n\r\n        this.moveVertically(changes.y.currentValue);\r\n      }\r\n    }\r\n\r\n    if (changes.lockAspectRatio) {\r\n      if (changes.lockAspectRatio.currentValue) {\r\n        this.aspectFactor = this.width / this.height;\r\n      } else {\r\n        this.aspectFactor = undefined;\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    removeEvent(document.documentElement, 'mousedown', this.deselect)\r\n    removeEvent(document.documentElement, 'touchstart', this.handleUp)\r\n    removeEvent(document.documentElement, 'mousemove', this.move)\r\n    removeEvent(document.documentElement, 'touchmove', this.move)\r\n    removeEvent(document.documentElement, 'mouseup', this.handleUp)\r\n    removeEvent(document.documentElement, 'touchend touchcancel', this.deselect)\r\n\r\n    removeEvent(window, 'resize', this.checkParentSize)\r\n  }\r\n\r\n  handleStyle(handle: string) {\r\n    const stick = handle;\r\n\r\n    if (!this.handleInfo.switch) {\r\n      return { display: this.enabled ? 'block' : 'none' }\r\n    }\r\n\r\n    const size = parseFloat((this.handleInfo.size / this.scaleRatio).toFixed(2));\r\n    const offset = (this.handleInfo.offset / this.scaleRatio).toFixed(2)\r\n    const center = (size / 2).toFixed(2)\r\n\r\n    const styleMap = {\r\n      tl: {\r\n        top: `${offset}px`,\r\n        left: `${offset}px`\r\n      },\r\n      tm: {\r\n        top: `${offset}px`,\r\n        left: `calc(50% - ${center}px)`\r\n      },\r\n      tr: {\r\n        top: `${offset}px`,\r\n        right: `${offset}px`\r\n      },\r\n      mr: {\r\n        top: `calc(50% - ${center}px)`,\r\n        right: `${offset}px`\r\n      },\r\n      br: {\r\n        bottom: `${offset}px`,\r\n        right: `${offset}px`\r\n      },\r\n      bm: {\r\n        bottom: `${offset}px`,\r\n        right: `calc(50% - ${center}px)`\r\n      },\r\n      bl: {\r\n        bottom: `${offset}px`,\r\n        left: `${offset}px`\r\n      },\r\n      ml: {\r\n        top: `calc(50% - ${center}px)`,\r\n        left: `${offset}px`\r\n      }\r\n    }\r\n    const stickStyle = {\r\n      width: `${size}px`,\r\n      height: `${size}px`,\r\n      top: styleMap[stick].top,\r\n      left: styleMap[stick].left,\r\n      right: styleMap[stick].right,\r\n      bottom: styleMap[stick].bottom,\r\n      display: 'none'\r\n    }\r\n    stickStyle.display = this.enabled ? 'block' : 'none'\r\n    return stickStyle\r\n  }\r\n\r\n  handleClass(handle: string): string {\r\n    return `${this.classNameHandle} ${this.classNameHandle}-${handle}`;\r\n  }\r\n\r\n  // 右键菜单\r\n  onContextMenu(e) {\r\n    this.contextmenu.emit(e);\r\n  }\r\n\r\n  // 控制柄触摸按下\r\n  handleTouchDown(handle: string, e: TouchEvent) {\r\n    eventsFor = events.touch\r\n\r\n    this.handleDown(handle, e)\r\n  }\r\n\r\n  // 控制柄按下\r\n  handleDown(handle: string, e: MouseEvent | TouchEvent) {\r\n    if (e instanceof MouseEvent && e.which !== 1) {\r\n      return\r\n    }\r\n\r\n    if (this.onResizeStart(this, e) === false) {\r\n      return\r\n    }\r\n\r\n    if (e.stopPropagation) e.stopPropagation()\r\n\r\n    // Here we avoid a dangerous recursion by faking\r\n    // corner handles as middle handles\r\n    if (this.lockAspectRatio && !handle.includes('m')) {\r\n      this.handle = 'm' + handle.substring(1)\r\n    } else {\r\n      this.handle = handle\r\n    }\r\n\r\n    this.resizing = true\r\n\r\n    this.mouseClickPosition.mouseX = e instanceof TouchEvent ? e.touches[0].pageX : e.pageX\r\n    this.mouseClickPosition.mouseY = e instanceof TouchEvent ? e.touches[0].pageY : e.pageY\r\n    this.mouseClickPosition.left = this.left\r\n    this.mouseClickPosition.right = this.right\r\n    this.mouseClickPosition.top = this.top\r\n    this.mouseClickPosition.bottom = this.bottom\r\n    this.mouseClickPosition.w = this.width\r\n    this.mouseClickPosition.h = this.height\r\n\r\n    this.bounds = this.calcResizeLimits()\r\n\r\n    addEvent(document.documentElement, eventsFor.move, this.handleResize)\r\n    addEvent(document.documentElement, eventsFor.stop, this.handleUp);\r\n  }\r\n\r\n  // 重置边界和鼠标状态\r\n  resetBoundsAndMouseState() {\r\n    this.mouseClickPosition = { mouseX: 0, mouseY: 0, x: 0, y: 0, w: 0, h: 0 }\r\n\r\n    this.bounds = {\r\n      minLeft: null,\r\n      maxLeft: null,\r\n      minRight: null,\r\n      maxRight: null,\r\n      minTop: null,\r\n      maxTop: null,\r\n      minBottom: null,\r\n      maxBottom: null\r\n    }\r\n  }\r\n\r\n  // 检查父元素大小\r\n  protected onCheckParentSize() {\r\n    if (this.parent) {\r\n      const [newParentWidth, newParentHeight] = this.getParentSize()\r\n      // 修复父元素改变大小后，组件resizing时活动异常\r\n      this.right = newParentWidth - this.width - this.left\r\n      this.bottom = newParentHeight - this.height - this.top\r\n\r\n      this.parentWidth = newParentWidth\r\n      this.parentHeight = newParentHeight\r\n    }\r\n  }\r\n\r\n  // 获取父元素大小\r\n  protected getParentSize() {\r\n    if (this.parent === true) {\r\n      const style = window.getComputedStyle(this.parentElement, null)\r\n      return [\r\n        parseInt(style.getPropertyValue('width'), 10),\r\n        parseInt(style.getPropertyValue('height'), 10)\r\n      ]\r\n    }\r\n    if (typeof (this.parent) === 'string') {\r\n      const parentNode = document.querySelector(this.parent)\r\n      if (!(parentNode instanceof HTMLElement)) {\r\n        throw new Error(`The selector ${this.parent} does not match any element`)\r\n      }\r\n      return [parentNode.offsetWidth, parentNode.offsetHeight]\r\n    }\r\n\r\n    return [null, null]\r\n  }\r\n\r\n\r\n  // 元素触摸按下\r\n  elementTouchDown(e: TouchEvent) {\r\n    eventsFor = events.touch\r\n\r\n    this.elementDown(e)\r\n  }\r\n\r\n  elementMouseDown(e: MouseEvent) {\r\n    eventsFor = events.mouse\r\n    this.elementDown(e)\r\n  }\r\n\r\n  // 元素按下\r\n  elementDown(e: TouchEvent | MouseEvent) {\r\n    if (e instanceof MouseEvent && e.which !== 1) {\r\n      return\r\n    }\r\n\r\n    const target = e.target || e.srcElement\r\n\r\n    if (this.$el.contains(target as Element)) {\r\n      if (this.onDragStart(this, e) === false) {\r\n        return\r\n      }\r\n\r\n      if (\r\n        (this.dragHandle && !matchesSelectorToParentElements(target as HTMLElement, this.dragHandle, this.$el)) ||\r\n        (this.dragCancel && matchesSelectorToParentElements(target as HTMLElement, this.dragCancel, this.$el))\r\n      ) {\r\n        this.dragging = false\r\n\r\n        return\r\n      }\r\n\r\n      if (!this.enabled) {\r\n        this.enabled = true;\r\n      }\r\n\r\n      if (this.draggable) {\r\n        this.dragging = true\r\n      }\r\n      this.mouseClickPosition.mouseX = e instanceof TouchEvent ? e.touches[0].pageX : e.pageX\r\n      this.mouseClickPosition.mouseY = e instanceof TouchEvent ? e.touches[0].pageY : e.pageY\r\n\r\n      this.mouseClickPosition.left = this.left\r\n      this.mouseClickPosition.right = this.right\r\n      this.mouseClickPosition.top = this.top\r\n      this.mouseClickPosition.bottom = this.bottom\r\n      this.mouseClickPosition.w = this.width\r\n      this.mouseClickPosition.h = this.height\r\n\r\n      if (this.parent) {\r\n        this.bounds = this.calcDragLimits()\r\n      }\r\n\r\n      addEvent(document.documentElement, eventsFor.move, this.move);\r\n      addEvent(document.documentElement, eventsFor.stop, this.handleUp);\r\n    }\r\n  }\r\n\r\n  // 移动\r\n  protected async onMove(e) {\r\n    if (this.resizing) {\r\n      this.onHandleResize(e)\r\n    } else if (this.dragging) {\r\n      await this.onHandleDrag(e)\r\n    }\r\n  }\r\n\r\n  // 元素移动\r\n  protected async onHandleDrag(e) {\r\n    const axis = this.axis\r\n    const grid = this.grid\r\n    const bounds = this.bounds\r\n    const mouseClickPosition = this.mouseClickPosition\r\n\r\n    const tmpDeltaX = axis && axis !== 'y' ? mouseClickPosition.mouseX - (e.touches ? e.touches[0].pageX : e.pageX) : 0\r\n    const tmpDeltaY = axis && axis !== 'x' ? mouseClickPosition.mouseY - (e.touches ? e.touches[0].pageY : e.pageY) : 0\r\n\r\n    const [deltaX, deltaY] = snapToGrid(grid, tmpDeltaX, tmpDeltaY, this.scaleRatio)\r\n\r\n    const left = restrictToBounds(mouseClickPosition.left - deltaX, bounds.minLeft, bounds.maxLeft)\r\n    const top = restrictToBounds(mouseClickPosition.top - deltaY, bounds.minTop, bounds.maxTop)\r\n    if (this.onDrag(this, left, top) === false) {\r\n      return\r\n    }\r\n    const right = restrictToBounds(mouseClickPosition.right + deltaX, bounds.minRight, bounds.maxRight)\r\n    const bottom = restrictToBounds(mouseClickPosition.bottom + deltaY, bounds.minBottom, bounds.maxBottom)\r\n    this.left = left\r\n    this.top = top\r\n    this.right = right\r\n    this.bottom = bottom\r\n\r\n    await this.snapCheck()\r\n    this.onDragging.emit({\r\n      left: this.left,\r\n      top: this.top\r\n    });\r\n  }\r\n\r\n  // 从控制柄松开\r\n  protected async onHandleUp(e) {\r\n    this.handle = null\r\n\r\n    // 初始化辅助线数据\r\n    const temArr = new Array(3).fill({ display: false, position: '', origin: '', lineLength: '' })\r\n    const refLine = { vLine: [], hLine: [] }\r\n    for (let i in refLine) {\r\n      refLine[i] = JSON.parse(JSON.stringify(temArr))\r\n    }\r\n\r\n    if (this.resizing) {\r\n      this.resizing = false\r\n      await this.conflictCheck()\r\n      this.refLineChange.emit(\r\n        {\r\n          vLine: refLine.vLine.filter(o => o.display),\r\n          hLine: refLine.hLine.filter(o => o.display)\r\n        }\r\n      );\r\n      this.onResizeStop.emit({\r\n        left: this.left,\r\n        top: this.top,\r\n        width: this.width,\r\n        height: this.height\r\n      });\r\n    }\r\n    if (this.dragging) {\r\n      this.dragging = false\r\n      await this.conflictCheck()\r\n      this.refLineChange.emit(\r\n        {\r\n          vLine: refLine.vLine.filter(o => o.display),\r\n          hLine: refLine.hLine.filter(o => o.display)\r\n        }\r\n      );\r\n      this.onDragStop.emit({\r\n        left: this.left,\r\n        top: this.top\r\n      });\r\n    }\r\n    this.resetBoundsAndMouseState()\r\n    removeEvent(document.documentElement, eventsFor.move, this.handleResize)\r\n  }\r\n\r\n  // 设置属性\r\n  protected settingAttribute() {\r\n    // 设置冲突检测\r\n    this.$el.setAttribute('data-is-check', `${this.isConflictCheck}`)\r\n    // 设置对齐元素\r\n    this.$el.setAttribute('data-is-snap', `${this.snap}`)\r\n  }\r\n\r\n  // 冲突检测\r\n  conflictCheck() {\r\n    const top = this.top\r\n    const left = this.left\r\n    const width = this.width\r\n    const height = this.height\r\n\r\n    if (this.isConflictCheck) {\r\n      const nodes = Array.from(this.$el.parentNode!.childNodes).map(o => o as HTMLElement); // 获取当前父节点下所有子节点\r\n      for (let item of nodes) {\r\n        if (item.className !== undefined && !item.className.includes(this.classNameActive) && item.getAttribute('data-is-check') !== null && item.getAttribute('data-is-check') !== 'false') {\r\n          const tw = item.offsetWidth\r\n          const th = item.offsetHeight\r\n          // 正则获取left与right\r\n          let [tl, tt] = this.formatTransformVal(item.style.transform)\r\n\r\n          // 左上角与右下角重叠\r\n          const tfAndBr = (top >= tt && left >= tl && tt + th > top && tl + tw > left) || (top <= tt && left < tl && top + height > tt && left + width > tl)\r\n          // 右上角与左下角重叠\r\n          const brAndTf = (left <= tl && top >= tt && left + width > tl && top < tt + th) || (top < tt && left > tl && top + height > tt && left < tl + tw)\r\n          // 下边与上边重叠\r\n          const bAndT = (top <= tt && left >= tl && top + height > tt && left < tl + tw) || (top >= tt && left <= tl && top < tt + th && left > tl + tw)\r\n          // 上边与下边重叠（宽度不一样）\r\n          const tAndB = (top <= tt && left >= tl && top + height > tt && left < tl + tw) || (top >= tt && left <= tl && top < tt + th && left > tl + tw)\r\n          // 左边与右边重叠\r\n          const lAndR = (left >= tl && top >= tt && left < tl + tw && top < tt + th) || (top > tt && left <= tl && left + width > tl && top < tt + th)\r\n          // 左边与右边重叠（高度不一样）\r\n          const rAndL = (top <= tt && left >= tl && top + height > tt && left < tl + tw) || (top >= tt && left <= tl && top < tt + th && left + width > tl)\r\n\r\n          // 如果冲突，就将回退到移动前的位置\r\n          if (tfAndBr || brAndTf || bAndT || tAndB || lAndR || rAndL) {\r\n            this.top = this.mouseClickPosition.top\r\n            this.left = this.mouseClickPosition.left\r\n            this.right = this.mouseClickPosition.right\r\n            this.bottom = this.mouseClickPosition.bottom\r\n            this.width = this.mouseClickPosition.w\r\n            this.height = this.mouseClickPosition.h\r\n\r\n            this.onResizing.emit({\r\n              left: this.left,\r\n              top: this.top,\r\n              width: this.width,\r\n              height: this.height\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // 检测对齐元素\r\n  async snapCheck() {\r\n    let width = this.width\r\n    let height = this.height\r\n    if (this.snap) {\r\n      let activeLeft = this.left\r\n      let activeRight = this.left + width\r\n      let activeTop = this.top\r\n      let activeBottom = this.top + height\r\n\r\n      // 初始化辅助线数据\r\n      const temArr = new Array(3).fill({ display: false, position: '', origin: '', lineLength: '' })\r\n      const refLine = { vLine: [], hLine: [] }\r\n      for (let i in refLine) {\r\n        refLine[i] = JSON.parse(JSON.stringify(temArr))\r\n      }\r\n\r\n      // 获取当前父节点下所有子节点\r\n      // const nodes = this.$el.parentNode.childNodes\r\n      const nodes = Array.from(this.$el.parentNode.childNodes).map(o => o as HTMLElement);\r\n\r\n      let tem = {\r\n        value: { x: [[], [], []], y: [[], [], []] },\r\n        display: [],\r\n        position: []\r\n      }\r\n      const { groupWidth, groupHeight, groupLeft, groupTop, bln } = await this.getActiveAll(nodes)\r\n      if (!bln) {\r\n        width = groupWidth\r\n        height = groupHeight\r\n        activeLeft = groupLeft\r\n        activeRight = groupLeft + groupWidth\r\n        activeTop = groupTop\r\n        activeBottom = groupTop + groupHeight\r\n      }\r\n      for (let item of nodes) {\r\n        if (item.className !== undefined && !item.className.includes(this.classNameActive) && item.getAttribute('data-is-snap') !== null && item.getAttribute('data-is-snap') !== 'false') {\r\n          const w = item.offsetWidth\r\n          const h = item.offsetHeight\r\n          const [l, t] = this.formatTransformVal(item.style.transform)\r\n          const r = l + w // 对齐目标right\r\n          const b = t + h // 对齐目标的bottom\r\n\r\n          const hc = Math.abs((activeTop + height / 2) - (t + h / 2)) <= this.snapTolerance // 水平中线\r\n          const vc = Math.abs((activeLeft + width / 2) - (l + w / 2)) <= this.snapTolerance // 垂直中线\r\n\r\n          const ts = Math.abs(t - activeBottom) <= this.snapTolerance // 从上到下\r\n          const TS = Math.abs(b - activeBottom) <= this.snapTolerance // 从上到下\r\n          const bs = Math.abs(t - activeTop) <= this.snapTolerance // 从下到上\r\n          const BS = Math.abs(b - activeTop) <= this.snapTolerance // 从下到上\r\n\r\n          const ls = Math.abs(l - activeRight) <= this.snapTolerance // 外左\r\n          const LS = Math.abs(r - activeRight) <= this.snapTolerance // 外左\r\n          const rs = Math.abs(l - activeLeft) <= this.snapTolerance // 外右\r\n          const RS = Math.abs(r - activeLeft) <= this.snapTolerance // 外右\r\n\r\n          tem['display'] = [ts, TS, bs, BS, hc, hc, ls, LS, rs, RS, vc, vc]\r\n          tem['position'] = [t, b, t, b, t + h / 2, t + h / 2, l, r, l, r, l + w / 2, l + w / 2]\r\n\r\n          // fix：中线自动对齐，元素可能超过父元素边界的问题\r\n          if (ts) {\r\n            if (bln) {\r\n              this.top = Math.max(t - height, this.bounds.minTop)\r\n              this.bottom = this.parentHeight - this.top - height\r\n            }\r\n            tem.value.y[0].push(l, r, activeLeft, activeRight)\r\n          }\r\n          if (bs) {\r\n            if (bln) {\r\n              this.top = t\r\n              this.bottom = this.parentHeight - this.top - height\r\n            }\r\n            tem.value.y[0].push(l, r, activeLeft, activeRight)\r\n          }\r\n          if (TS) {\r\n            if (bln) {\r\n              this.top = Math.max(b - height, this.bounds.minTop)\r\n              this.bottom = this.parentHeight - this.top - height\r\n            }\r\n            tem.value.y[1].push(l, r, activeLeft, activeRight)\r\n          }\r\n          if (BS) {\r\n            if (bln) {\r\n              this.top = b\r\n              this.bottom = this.parentHeight - this.top - height\r\n            }\r\n            tem.value.y[1].push(l, r, activeLeft, activeRight)\r\n          }\r\n\r\n          if (ls) {\r\n            if (bln) {\r\n              this.left = Math.max(l - width, this.bounds.minLeft)\r\n              this.right = this.parentWidth - this.left - width\r\n            }\r\n            tem.value.x[0].push(t, b, activeTop, activeBottom)\r\n          }\r\n          if (rs) {\r\n            if (bln) {\r\n              this.left = l\r\n              this.right = this.parentWidth - this.left - width\r\n            }\r\n            tem.value.x[0].push(t, b, activeTop, activeBottom)\r\n          }\r\n          if (LS) {\r\n            if (bln) {\r\n              this.left = Math.max(r - width, this.bounds.minLeft)\r\n              this.right = this.parentWidth - this.left - width\r\n            }\r\n            tem.value.x[1].push(t, b, activeTop, activeBottom)\r\n          }\r\n          if (RS) {\r\n            if (bln) {\r\n              this.left = r\r\n              this.right = this.parentWidth - this.left - width\r\n            }\r\n            tem.value.x[1].push(t, b, activeTop, activeBottom)\r\n          }\r\n\r\n          if (hc) {\r\n            if (bln) {\r\n              this.top = Math.max(t + h / 2 - height / 2, this.bounds.minTop)\r\n              this.bottom = this.parentHeight - this.top - height\r\n            }\r\n            tem.value.y[2].push(l, r, activeLeft, activeRight)\r\n          }\r\n          if (vc) {\r\n            if (bln) {\r\n              this.left = Math.max(l + w / 2 - width / 2, this.bounds.minLeft)\r\n              this.right = this.parentWidth - this.left - width\r\n            }\r\n            tem.value.x[2].push(t, b, activeTop, activeBottom)\r\n          }\r\n          // 辅助线坐标与是否显示(display)对应的数组,易于循环遍历\r\n          const arrTem = [0, 1, 0, 1, 2, 2, 0, 1, 0, 1, 2, 2]\r\n          for (let i = 0; i <= arrTem.length; i++) {\r\n            // 前6为Y辅助线,后6为X辅助线\r\n            const xory = i < 6 ? 'y' : 'x'\r\n            const horv = i < 6 ? 'hLine' : 'vLine'\r\n            if (tem.display[i]) {\r\n              const { origin, length } = this.calcLineValues(tem.value[xory][arrTem[i]])\r\n              refLine[horv][arrTem[i]].display = tem.display[i]\r\n              refLine[horv][arrTem[i]].position = tem.position[i];\r\n              refLine[horv][arrTem[i]].origin = origin\r\n              refLine[horv][arrTem[i]].lineLength = length\r\n            }\r\n          }\r\n        }\r\n      }\r\n      this.refLineChange.emit(\r\n        {\r\n          vLine: refLine.vLine.filter(o => o.display),\r\n          hLine: refLine.hLine.filter(o => o.display)\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  protected calcLineValues(arr: number[]): { length: number, origin: number } {\r\n    const length = Math.max(...arr) - Math.min(...arr);\r\n    const origin = Math.min(...arr);\r\n    return { length, origin }\r\n  }\r\n\r\n  /** 取消 */\r\n  protected onDeselect(e) {\r\n    const target = e.target || e.srcElement\r\n    const regex = new RegExp(this.className + '-([trmbl]{2})', '')\r\n\r\n    if (!this.$el.contains(target) && !regex.test(target.className)) {\r\n      if (this.enabled && !this.preventDeactivation) {\r\n        this.enabled = false;\r\n      }\r\n\r\n      removeEvent(document.documentElement, eventsFor.move, this.handleResize)\r\n    }\r\n\r\n    this.resetBoundsAndMouseState()\r\n  }\r\n\r\n  /** 获取所有激活的节点 */\r\n  protected async getActiveAll(nodes: HTMLElement[]) {\r\n    const activeAll = []\r\n    const XArray = []\r\n    const YArray = []\r\n    let groupWidth = 0\r\n    let groupHeight = 0\r\n    let groupLeft = 0\r\n    let groupTop = 0\r\n    for (let item of nodes) {\r\n      if (item.className !== undefined && item.className.includes(this.classNameActive)) {\r\n        activeAll.push(item)\r\n      }\r\n    }\r\n    const AllLength = activeAll.length\r\n    if (AllLength > 1) {\r\n      for (let i of activeAll) {\r\n        const l = i.offsetLeft\r\n        const r = l + i.offsetWidth\r\n        const t = i.offsetTop\r\n        const b = t + i.offsetHeight\r\n        XArray.push(t, b)\r\n        YArray.push(l, r)\r\n      }\r\n      groupWidth = Math.max(...YArray) - Math.min(...YArray)\r\n      groupHeight = Math.max(...XArray) - Math.min(...XArray)\r\n      groupLeft = Math.min(...YArray)\r\n      groupTop = Math.min(...XArray)\r\n    }\r\n    const bln = AllLength === 1\r\n    return { groupWidth, groupHeight, groupLeft, groupTop, bln }\r\n  }\r\n\r\n  // 正则获取left与top\r\n  protected formatTransformVal(string) {\r\n    let [left, top] = string.replace(/[^0-9\\-,]/g, '').split(',')\r\n    if (top === undefined) top = 0\r\n    return [+left, +top]\r\n  }\r\n\r\n  // 计算移动范围\r\n  protected calcDragLimits() {\r\n    return {\r\n      minLeft: this.left % this.grid[0],\r\n      maxLeft: Math.floor((this.parentWidth - this.width - this.left) / this.grid[0]) * this.grid[0] + this.left,\r\n      minRight: this.right % this.grid[0],\r\n      maxRight: Math.floor((this.parentWidth - this.width - this.right) / this.grid[0]) * this.grid[0] + this.right,\r\n      minTop: this.top % this.grid[1],\r\n      maxTop: Math.floor((this.parentHeight - this.height - this.top) / this.grid[1]) * this.grid[1] + this.top,\r\n      minBottom: this.bottom % this.grid[1],\r\n      maxBottom: Math.floor((this.parentHeight - this.height - this.bottom) / this.grid[1]) * this.grid[1] + this.bottom\r\n    }\r\n  }\r\n\r\n  protected moveHorizontally(val: number) {\r\n    const [deltaX, _] = snapToGrid(this.grid, val, this.top, this.scale)\r\n    const left = restrictToBounds(deltaX, this.bounds.minLeft, this.bounds.maxLeft)\r\n    this.left = left\r\n    this.right = this.parentWidth - this.width - left\r\n  }\r\n\r\n  protected moveVertically(val: number) {\r\n    const [_, deltaY] = snapToGrid(this.grid, this.left, val, this.scale)\r\n    const top = restrictToBounds(deltaY, this.bounds.minTop, this.bounds.maxTop)\r\n    this.top = top\r\n    this.bottom = this.parentHeight - this.height - top\r\n  }\r\n\r\n  // 计算调整大小范围\r\n  protected calcResizeLimits() {\r\n    let minW = this.minW\r\n    let minH = this.minH\r\n    let maxW = this.maxW\r\n    let maxH = this.maxH\r\n\r\n    const aspectFactor = this.aspectFactor\r\n    const [gridX, gridY] = this.grid\r\n    const width = this.width\r\n    const height = this.height\r\n    const left = this.left\r\n    const top = this.top\r\n    const right = this.right\r\n    const bottom = this.bottom\r\n\r\n    if (this.lockAspectRatio) {\r\n      if (minW / minH > aspectFactor) {\r\n        minH = minW / aspectFactor\r\n      } else {\r\n        minW = aspectFactor * minH\r\n      }\r\n\r\n      if (maxW && maxH) {\r\n        maxW = Math.min(maxW, aspectFactor * maxH)\r\n        maxH = Math.min(maxH, maxW / aspectFactor)\r\n      } else if (maxW) {\r\n        maxH = maxW / aspectFactor\r\n      } else if (maxH) {\r\n        maxW = aspectFactor * maxH\r\n      }\r\n    }\r\n\r\n    maxW = maxW - (maxW % gridX)\r\n    maxH = maxH - (maxH % gridY)\r\n\r\n    const limits = {\r\n      minLeft: null,\r\n      maxLeft: null,\r\n      minTop: null,\r\n      maxTop: null,\r\n      minRight: null,\r\n      maxRight: null,\r\n      minBottom: null,\r\n      maxBottom: null\r\n    }\r\n\r\n    if (this.parent) {\r\n      limits.minLeft = left % gridX\r\n      limits.maxLeft = left + Math.floor((width - minW) / gridX) * gridX\r\n      limits.minTop = top % gridY\r\n      limits.maxTop = top + Math.floor((height - minH) / gridY) * gridY\r\n      limits.minRight = right % gridX\r\n      limits.maxRight = right + Math.floor((width - minW) / gridX) * gridX\r\n      limits.minBottom = bottom % gridY\r\n      limits.maxBottom = bottom + Math.floor((height - minH) / gridY) * gridY\r\n\r\n      if (maxW) {\r\n        limits.minLeft = Math.max(limits.minLeft, this.parentWidth - right - maxW)\r\n        limits.minRight = Math.max(limits.minRight, this.parentWidth - left - maxW)\r\n      }\r\n\r\n      if (maxH) {\r\n        limits.minTop = Math.max(limits.minTop, this.parentHeight - bottom - maxH)\r\n        limits.minBottom = Math.max(limits.minBottom, this.parentHeight - top - maxH)\r\n      }\r\n\r\n      if (this.lockAspectRatio) {\r\n        limits.minLeft = Math.max(limits.minLeft, left - top * aspectFactor)\r\n        limits.minTop = Math.max(limits.minTop, top - left / aspectFactor)\r\n        limits.minRight = Math.max(limits.minRight, right - bottom * aspectFactor)\r\n        limits.minBottom = Math.max(limits.minBottom, bottom - right / aspectFactor)\r\n      }\r\n    } else {\r\n      limits.minLeft = null\r\n      limits.maxLeft = left + Math.floor((width - minW) / gridX) * gridX\r\n      limits.minTop = null\r\n      limits.maxTop = top + Math.floor((height - minH) / gridY) * gridY\r\n      limits.minRight = null\r\n      limits.maxRight = right + Math.floor((width - minW) / gridX) * gridX\r\n      limits.minBottom = null\r\n      limits.maxBottom = bottom + Math.floor((height - minH) / gridY) * gridY\r\n\r\n      if (maxW) {\r\n        limits.minLeft = -(right + maxW)\r\n        limits.minRight = -(left + maxW)\r\n      }\r\n\r\n      if (maxH) {\r\n        limits.minTop = -(bottom + maxH)\r\n        limits.minBottom = -(top + maxH)\r\n      }\r\n\r\n      if (this.lockAspectRatio && (maxW && maxH)) {\r\n        limits.minLeft = Math.min(limits.minLeft, -(right + maxW))\r\n        limits.minTop = Math.min(limits.minTop, -(maxH + bottom))\r\n        limits.minRight = Math.min(limits.minRight, -left - maxW)\r\n        limits.minBottom = Math.min(limits.minBottom, -top - maxH)\r\n      }\r\n    }\r\n\r\n    return limits\r\n  }\r\n\r\n\r\n  // 控制柄移动\r\n  protected async onHandleResize(e) {\r\n    let left = this.left\r\n    let top = this.top\r\n    let right = this.right\r\n    let bottom = this.bottom\r\n\r\n    const mouseClickPosition = this.mouseClickPosition\r\n    // const lockAspectRatio = this.lockAspectRatio\r\n    const aspectFactor = this.aspectFactor\r\n\r\n    const tmpDeltaX = mouseClickPosition.mouseX - (e.touches ? e.touches[0].pageX : e.pageX)\r\n    const tmpDeltaY = mouseClickPosition.mouseY - (e.touches ? e.touches[0].pageY : e.pageY)\r\n\r\n    if (!this.widthTouched && tmpDeltaX) {\r\n      this.widthTouched = true\r\n    }\r\n    if (!this.heightTouched && tmpDeltaY) {\r\n      this.heightTouched = true\r\n    }\r\n    const [deltaX, deltaY] = snapToGrid(this.grid, tmpDeltaX, tmpDeltaY, this.scaleRatio)\r\n\r\n    if (this.handle.includes('b')) {\r\n      bottom = restrictToBounds(\r\n        mouseClickPosition.bottom + deltaY,\r\n        this.bounds.minBottom,\r\n        this.bounds.maxBottom\r\n      )\r\n      if (this.lockAspectRatio && this.resizingOnY) {\r\n        right = this.right - (this.bottom - bottom) * aspectFactor\r\n      }\r\n    } else if (this.handle.includes('t')) {\r\n      top = restrictToBounds(\r\n        mouseClickPosition.top - deltaY,\r\n        this.bounds.minTop,\r\n        this.bounds.maxTop\r\n      )\r\n      if (this.lockAspectRatio && this.resizingOnY) {\r\n        left = this.left - (this.top - top) * aspectFactor\r\n      }\r\n    }\r\n\r\n    if (this.handle.includes('r')) {\r\n      right = restrictToBounds(\r\n        mouseClickPosition.right + deltaX,\r\n        this.bounds.minRight,\r\n        this.bounds.maxRight\r\n      )\r\n      if (this.lockAspectRatio && this.resizingOnX) {\r\n        bottom = this.bottom - (this.right - right) / aspectFactor\r\n      }\r\n    } else if (this.handle.includes('l')) {\r\n      left = restrictToBounds(\r\n        mouseClickPosition.left - deltaX,\r\n        this.bounds.minLeft,\r\n        this.bounds.maxLeft\r\n      )\r\n      if (this.lockAspectRatio && this.resizingOnX) {\r\n        top = this.top - (this.left - left) / aspectFactor\r\n      }\r\n    }\r\n\r\n    const width = computeWidth(this.parentWidth, left, right)\r\n    const height = computeHeight(this.parentHeight, top, bottom)\r\n    if (this.onResize(this.handle, this.left, this.top, this.width, this.height) === false) {\r\n      return\r\n    }\r\n    this.left = left\r\n    this.top = top\r\n    this.right = right\r\n    this.bottom = bottom\r\n    this.width = width\r\n    this.height = height\r\n    this.onResizing.emit({\r\n      left: this.left,\r\n      top: this.top,\r\n      width: this.width,\r\n      height: this.height\r\n    });\r\n  }\r\n\r\n  protected changeWidth(val: number) {\r\n    const [newWidth, _] = snapToGrid(this.grid, val, 0, this.scale)\r\n    let right = restrictToBounds(\r\n      (this.parentWidth - newWidth - this.left),\r\n      this.bounds.minRight,\r\n      this.bounds.maxRight\r\n    )\r\n    let bottom = this.bottom\r\n    if (this.lockAspectRatio) {\r\n      bottom = this.bottom - (this.right - right) / this.aspectFactor\r\n    }\r\n    const width = computeWidth(this.parentWidth, this.left, right)\r\n    const height = computeHeight(this.parentHeight, this.top, bottom)\r\n    this.right = right\r\n    this.bottom = bottom\r\n    this.width = width\r\n    this.height = height\r\n  }\r\n\r\n  protected changeHeight(val: number) {\r\n    const [_, newHeight] = snapToGrid(this.grid, 0, val, this.scale)\r\n    let bottom = restrictToBounds(\r\n      (this.parentHeight - newHeight - this.top),\r\n      this.bounds.minBottom,\r\n      this.bounds.maxBottom\r\n    )\r\n    let right = this.right\r\n    if (this.lockAspectRatio) {\r\n      right = this.right - (this.bottom - bottom) * this.aspectFactor\r\n    }\r\n    const width = computeWidth(this.parentWidth, this.left, right)\r\n    const height = computeHeight(this.parentHeight, this.top, bottom)\r\n    this.right = right\r\n    this.bottom = bottom\r\n    this.width = width\r\n    this.height = height\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 322,
                "jsdoctags": [
                    {
                        "name": "elRef",
                        "type": "ElementRef<HTMLElement>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnChanges",
                "OnDestroy"
            ],
            "accessors": {
                "width": {
                    "name": "width",
                    "setSignature": {
                        "name": "width",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 161,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "width",
                        "type": "",
                        "returnType": "",
                        "line": 157
                    }
                },
                "height": {
                    "name": "height",
                    "setSignature": {
                        "name": "height",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 171,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "height",
                        "type": "",
                        "returnType": "",
                        "line": 167
                    }
                },
                "enabled": {
                    "name": "enabled",
                    "setSignature": {
                        "name": "enabled",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 235,
                        "rawdescription": "当前dom元素是否启用",
                        "description": "<p>当前dom元素是否启用</p>\n",
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "enabled",
                        "type": "",
                        "returnType": "",
                        "line": 231,
                        "rawdescription": "当前dom元素是否启用",
                        "description": "<p>当前dom元素是否启用</p>\n"
                    }
                },
                "actualHandles": {
                    "name": "actualHandles",
                    "getSignature": {
                        "name": "actualHandles",
                        "type": "",
                        "returnType": "",
                        "line": 246,
                        "rawdescription": "当前dom元素重置大小的handle",
                        "description": "<p>当前dom元素重置大小的handle</p>\n"
                    }
                },
                "selfClass": {
                    "name": "selfClass",
                    "getSignature": {
                        "name": "selfClass",
                        "type": "",
                        "returnType": "",
                        "line": 255,
                        "rawdescription": "当前dom元素使用的类",
                        "description": "<p>当前dom元素使用的类</p>\n"
                    }
                },
                "$el": {
                    "name": "$el",
                    "getSignature": {
                        "name": "$el",
                        "type": "",
                        "returnType": "HTMLElement",
                        "line": 278,
                        "rawdescription": "当前dom元素",
                        "description": "<p>当前dom元素</p>\n"
                    }
                },
                "parentElement": {
                    "name": "parentElement",
                    "getSignature": {
                        "name": "parentElement",
                        "type": "",
                        "returnType": "",
                        "line": 283,
                        "rawdescription": "当前dom元素的parnet",
                        "description": "<p>当前dom元素的parnet</p>\n"
                    }
                },
                "style": {
                    "name": "style",
                    "getSignature": {
                        "name": "style",
                        "type": "",
                        "returnType": "",
                        "line": 288,
                        "rawdescription": "当前dom元素的样式",
                        "description": "<p>当前dom元素的样式</p>\n"
                    }
                },
                "computedWidth": {
                    "name": "computedWidth",
                    "getSignature": {
                        "name": "computedWidth",
                        "type": "",
                        "returnType": "",
                        "line": 297,
                        "rawdescription": "当前dom元素实际宽度",
                        "description": "<p>当前dom元素实际宽度</p>\n"
                    }
                },
                "computedHeight": {
                    "name": "computedHeight",
                    "getSignature": {
                        "name": "computedHeight",
                        "type": "",
                        "returnType": "",
                        "line": 307,
                        "rawdescription": "当前dom元素实际高度",
                        "description": "<p>当前dom元素实际高度</p>\n"
                    }
                }
            },
            "templateData": "<div *ngFor=\"let handle of actualHandles\"\r\n     [attr.data-handle-name]=\"handle\"\r\n     [class]=\"handleClass(handle)\"\r\n     [style]=\"handleStyle(handle)\"\r\n     (mousedown)=\"handleDown(handle,$event)\"\r\n     (touchstart)=\"handleTouchDown(handle, $event)\">\r\n</div>\r\n\r\n<ng-content></ng-content>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-8f196770333aa216860a88c0b6b221aa",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-8221d9161be93b6ea667117961472052",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgDraggableResizableModule } from '@rivenfx/ng-draggable-resizable';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    NgDraggableResizableModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "NgDraggableResizableModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-3c1d721cfd0753406a1cfde101c59380",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgDraggableResizableModule",
            "id": "module-NgDraggableResizableModule-ada40b11b1a827343da659deb176a9f4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ng-draggable-resizable/src/draggable-resizable/ng-draggable-resizable.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { DraggableResizableComponent } from './draggable-resizable.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    DraggableResizableComponent,\r\n  ],\r\n  exports: [\r\n    DraggableResizableComponent,\r\n  ],\r\n  imports: [\r\n    BrowserModule\r\n  ],\r\n  providers: [],\r\n})\r\nexport class NgDraggableResizableModule {\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DraggableResizableComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DraggableResizableComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-draggable-resizable/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "events",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-draggable-resizable/src/draggable-resizable/interfaces.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  mouse: {\r\n    start: 'mousedown',\r\n    move: 'mousemove',\r\n    stop: 'mouseup'\r\n  },\r\n  touch: {\r\n    start: 'touchstart',\r\n    move: 'touchmove',\r\n    stop: 'touchend'\r\n  }\r\n}",
                "rawdescription": "事件",
                "description": "<p>事件</p>\n"
            },
            {
                "name": "eventsFor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-draggable-resizable/src/draggable-resizable/draggable-resizable.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "events.mouse"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-draggable-resizable/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "userSelectAuto",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-draggable-resizable/src/draggable-resizable/interfaces.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  userSelect: 'auto',\r\n  MozUserSelect: 'auto',\r\n  WebkitUserSelect: 'auto',\r\n  MsUserSelect: 'auto'\r\n}",
                "rawdescription": "用户选中自动选中样式",
                "description": "<p>用户选中自动选中样式</p>\n"
            },
            {
                "name": "userSelectNone",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ng-draggable-resizable/src/draggable-resizable/interfaces.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  userSelect: 'none',\r\n  MozUserSelect: 'none',\r\n  WebkitUserSelect: 'none',\r\n  MsUserSelect: 'none'\r\n}",
                "rawdescription": "禁止用户选取样式",
                "description": "<p>禁止用户选取样式</p>\n"
            }
        ],
        "functions": [
            {
                "name": "addEvent",
                "file": "projects/ng-draggable-resizable/src/utils/dom.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "el",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "event",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "handler",
                        "type": "Function",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "el",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "event",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "handler",
                        "type": "Function",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "computeHeight",
                "file": "projects/ng-draggable-resizable/src/utils/fns.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "parentHeight",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "top",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "bottom",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "number",
                "jsdoctags": [
                    {
                        "name": "parentHeight",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "top",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bottom",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "computeWidth",
                "file": "projects/ng-draggable-resizable/src/utils/fns.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "parentWidth",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "left",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "right",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "number",
                "jsdoctags": [
                    {
                        "name": "parentWidth",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "left",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "right",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getComputedSize",
                "file": "projects/ng-draggable-resizable/src/utils/dom.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "$el",
                        "type": "HTMLElement",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "number[]",
                "jsdoctags": [
                    {
                        "name": "$el",
                        "type": "HTMLElement",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getSize",
                "file": "projects/ng-draggable-resizable/src/utils/fns.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "el",
                        "type": "HTMLElement",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "number[]",
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "HTMLElement",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isFunction",
                "file": "projects/ng-draggable-resizable/src/utils/fns.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "func",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "func",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "matchesSelectorToParentElements",
                "file": "projects/ng-draggable-resizable/src/utils/dom.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "el",
                        "type": "HTMLElement",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "selector",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "baseNode",
                        "type": "HTMLElement",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "HTMLElement",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "selector",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "baseNode",
                        "type": "HTMLElement",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "removeEvent",
                "file": "projects/ng-draggable-resizable/src/utils/dom.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "el",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "event",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "handler",
                        "type": "Function",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "el",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "event",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "handler",
                        "type": "Function",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "restrictToBounds",
                "file": "projects/ng-draggable-resizable/src/utils/fns.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "value",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "min",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "max",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "number",
                "jsdoctags": [
                    {
                        "name": "value",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "min",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "max",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "snapToGrid",
                "file": "projects/ng-draggable-resizable/src/utils/fns.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "grid",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pendingX",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pendingY",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "scale",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "1"
                    }
                ],
                "returnType": "number[]",
                "jsdoctags": [
                    {
                        "name": "grid",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pendingX",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pendingY",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scale",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "1",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/ng-draggable-resizable/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-draggable-resizable/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-draggable-resizable/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "projects/ng-draggable-resizable/src/draggable-resizable/interfaces.ts": [
                {
                    "name": "events",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-draggable-resizable/src/draggable-resizable/interfaces.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  mouse: {\r\n    start: 'mousedown',\r\n    move: 'mousemove',\r\n    stop: 'mouseup'\r\n  },\r\n  touch: {\r\n    start: 'touchstart',\r\n    move: 'touchmove',\r\n    stop: 'touchend'\r\n  }\r\n}",
                    "rawdescription": "事件",
                    "description": "<p>事件</p>\n"
                },
                {
                    "name": "userSelectAuto",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-draggable-resizable/src/draggable-resizable/interfaces.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  userSelect: 'auto',\r\n  MozUserSelect: 'auto',\r\n  WebkitUserSelect: 'auto',\r\n  MsUserSelect: 'auto'\r\n}",
                    "rawdescription": "用户选中自动选中样式",
                    "description": "<p>用户选中自动选中样式</p>\n"
                },
                {
                    "name": "userSelectNone",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-draggable-resizable/src/draggable-resizable/interfaces.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  userSelect: 'none',\r\n  MozUserSelect: 'none',\r\n  WebkitUserSelect: 'none',\r\n  MsUserSelect: 'none'\r\n}",
                    "rawdescription": "禁止用户选取样式",
                    "description": "<p>禁止用户选取样式</p>\n"
                }
            ],
            "projects/ng-draggable-resizable/src/draggable-resizable/draggable-resizable.component.ts": [
                {
                    "name": "eventsFor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ng-draggable-resizable/src/draggable-resizable/draggable-resizable.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "events.mouse"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {
            "projects/ng-draggable-resizable/src/utils/dom.ts": [
                {
                    "name": "addEvent",
                    "file": "projects/ng-draggable-resizable/src/utils/dom.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "el",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "handler",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "el",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "handler",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getComputedSize",
                    "file": "projects/ng-draggable-resizable/src/utils/dom.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "$el",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "number[]",
                    "jsdoctags": [
                        {
                            "name": "$el",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "matchesSelectorToParentElements",
                    "file": "projects/ng-draggable-resizable/src/utils/dom.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "el",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "selector",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "baseNode",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "el",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selector",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "baseNode",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeEvent",
                    "file": "projects/ng-draggable-resizable/src/utils/dom.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "el",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "handler",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "el",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "handler",
                            "type": "Function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/ng-draggable-resizable/src/utils/fns.ts": [
                {
                    "name": "computeHeight",
                    "file": "projects/ng-draggable-resizable/src/utils/fns.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "parentHeight",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "top",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "bottom",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "number",
                    "jsdoctags": [
                        {
                            "name": "parentHeight",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "top",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "bottom",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "computeWidth",
                    "file": "projects/ng-draggable-resizable/src/utils/fns.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "parentWidth",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "left",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "right",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "number",
                    "jsdoctags": [
                        {
                            "name": "parentWidth",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "left",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "right",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSize",
                    "file": "projects/ng-draggable-resizable/src/utils/fns.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "el",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "number[]",
                    "jsdoctags": [
                        {
                            "name": "el",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isFunction",
                    "file": "projects/ng-draggable-resizable/src/utils/fns.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "func",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "func",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "restrictToBounds",
                    "file": "projects/ng-draggable-resizable/src/utils/fns.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "min",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "max",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "number",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "min",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "max",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "snapToGrid",
                    "file": "projects/ng-draggable-resizable/src/utils/fns.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "grid",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pendingX",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pendingY",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scale",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1"
                        }
                    ],
                    "returnType": "number[]",
                    "jsdoctags": [
                        {
                            "name": "grid",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pendingX",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pendingY",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scale",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 13,
        "status": "low",
        "files": [
            {
                "filePath": "projects/ng-draggable-resizable/src/draggable-resizable/draggable-resizable.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DraggableResizableComponent",
                "coveragePercent": 59,
                "coverageCount": "66/111",
                "status": "good"
            },
            {
                "filePath": "projects/ng-draggable-resizable/src/draggable-resizable/draggable-resizable.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "eventsFor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-draggable-resizable/src/draggable-resizable/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDrag",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "projects/ng-draggable-resizable/src/draggable-resizable/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IHandleInfo",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "projects/ng-draggable-resizable/src/draggable-resizable/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMouseClickPosition",
                "coveragePercent": 9,
                "coverageCount": "1/11",
                "status": "low"
            },
            {
                "filePath": "projects/ng-draggable-resizable/src/draggable-resizable/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IRefLine",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "projects/ng-draggable-resizable/src/draggable-resizable/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IRefLineGroup",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "projects/ng-draggable-resizable/src/draggable-resizable/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IResize",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "projects/ng-draggable-resizable/src/draggable-resizable/interfaces.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "events",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ng-draggable-resizable/src/draggable-resizable/interfaces.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userSelectAuto",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ng-draggable-resizable/src/draggable-resizable/interfaces.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userSelectNone",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/ng-draggable-resizable/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-draggable-resizable/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-draggable-resizable/src/utils/dom.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "addEvent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-draggable-resizable/src/utils/dom.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getComputedSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-draggable-resizable/src/utils/dom.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "matchesSelectorToParentElements",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-draggable-resizable/src/utils/dom.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "removeEvent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-draggable-resizable/src/utils/fns.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "computeHeight",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-draggable-resizable/src/utils/fns.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "computeWidth",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-draggable-resizable/src/utils/fns.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-draggable-resizable/src/utils/fns.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isFunction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-draggable-resizable/src/utils/fns.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "restrictToBounds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ng-draggable-resizable/src/utils/fns.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "snapToGrid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}